import "pkg:/components/manager/ViewCreator.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/ResumePopupAction.bs"
import "pkg:/source/enums/String.bs"
import "pkg:/source/utils/misc.bs"

sub onQuickPlayEvent(msg)
    m.global.queueManager.callFunc("setForceTranscode", false)

    reportingNode = msg.getRoSGNode()
    itemNode = invalid

    ' Prevent double fire bug
    if isValid(reportingNode)
        itemNode = reportingNode.quickPlayNode
        reportingNodeType = reportingNode.subtype()
        if isValid(reportingNodeType)
            if inArray(["home", "TVEpisodes"], reportingNodeType)
                reportingNode.quickPlayNode = invalid
            end if
        end if
    end if

    if not isValid(itemNode) then return
    if not isValidAndNotEmpty(itemNode.id) then return

    ' Get item type
    selectedItemType = invalid
    if isValidAndNotEmpty(itemNode.type)
        selectedItemType = itemNode.type
    else
        ' Grab type from json
        if isChainValid(itemNode, "json.type")
            selectedItemType = itemNode.json.type
        end if
    end if

    ' Can't play the item without knowing what type it is
    if not isValidAndNotEmpty(selectedItemType) then return

    startLoadingSpinner()
    m.global.queueManager.callFunc("clear") ' empty queue/playlist
    m.global.queueManager.callFunc("resetShuffle") ' turn shuffle off

    if inArray([ItemType.EPISODE, ItemType.RECORDING, ItemType.MOVIE, ItemType.VIDEO], selectedItemType)
        quickplay.video(itemNode)
        ' Restore focus
        group = m.global.sceneManager.callFunc("getActiveScene")
        if isValid(group)
            if isStringEqual(group.subtype(), "tvepisodes")
                if isValid(group.lastFocus)
                    group.lastFocus.setFocus(true)
                end if
            end if
        end if

        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.AUDIO)
        quickplay.audio(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.AUDIOBOOK)
        quickplay.audioBook(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.MUSICALBUM)
        quickplay.album(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.MUSICARTIST)
        quickplay.artist(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.SERIES)
        quickplay.series(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.SEASON)
        quickplay.season(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.BOXSET)
        quickplay.boxset(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.COLLECTIONFOLDER)
        quickplay.collectionFolder(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.PLAYLIST)
        quickplay.playlist(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.USERVIEW)
        quickplay.userView(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.FOLDER)
        quickplay.folder(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.MUSICVIDEO)
        quickplay.musicVideo(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.PERSON)
        quickplay.person(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.TVCHANNEL)
        quickplay.tvChannel(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.PROGRAM)
        quickplay.program(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.PHOTO)
        quickplay.photo(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if isStringEqual(selectedItemType, ItemType.PHOTOALBUM)
        quickplay.photoAlbum(itemNode)
        m.global.queueManager.callFunc("playQueue")
        return
    end if
end sub

sub onCloseSidePanelEvent()
    group = m.global.sceneManager.callFunc("getActiveScene")
    if isValid(group.lastFocus)
        group.lastFocus.setFocus(true)

        if group.lastFocus.isSubType("JFOverhang")
            group.lastFocus.callFunc("highlightUser")
        end if

        return
    end if

    group.setFocus(true)
    group.lastFocus = group
end sub

sub onJumpToEvent(msg)
    jumpToData = msg.getData()
    if not isValid(jumpToData) then return

    currentView = m.global.sceneManager.callFunc("getActiveScene")

    ' If current view is audio player, remove it from the scene stack so users can't press back to return to it
    if isStringEqual(currentView.subType(), "audioplayerview")
        m.global.sceneManager.callFunc("clearPreviousScene")
    end if

    if isStringEqual(jumpToData.selectiontype, "nowplaying")
        JumpIntoAudioPlayerView()
    end if

    if isStringEqual(jumpToData.selectiontype, "artist")
        startLoadingSpinner()
        group = CreateArtistView(jumpToData)
        if not isValid(group)
            stopLoadingSpinner()
            message_dialog(tr("Unable to find any albums or songs belonging to this artist"))
        end if
    end if

    if isStringEqual(jumpToData.selectiontype, "album")
        startLoadingSpinner()
        group = CreateAlbumView(jumpToData)
        if not isValid(group)
            stopLoadingSpinner()
        end if
    end if
end sub

sub onDeepLinkingEvent(args)
    if not isValidAndNotEmpty(args) then return
    if not isValidAndNotEmpty(args.mediaType) then return
    if not isValidAndNotEmpty(args.contentId) then return

    startLoadingSpinner()
    m.global.queueManager.callFunc("clear") ' empty queue/playlist
    m.global.queueManager.callFunc("resetShuffle") ' turn shuffle off

    mediaType = LCase(args.mediaType)

    if inArray([ItemType.EPISODE, ItemType.RECORDING, ItemType.MOVIE, ItemType.VIDEO], mediaType)
        quickplay.video({
            id: args.contentId,
            type: mediaType,
            json: {}
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.AUDIO
        quickplay.audio({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.AUDIOBOOK
        quickplay.audioBook({
            id: args.contentId,
            type: mediaType,
            json: {}
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.MUSICALBUM
        quickplay.album({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.MUSICARTIST
        quickplay.artist({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.SERIES
        quickplay.series({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.SEASON
        if isValidAndNotEmpty(args.seriesID)
            quickplay.season({
                id: args.contentId,
                type: mediaType,
                json: {
                    SeriesId: args.seriesID
                }
            })
            m.global.queueManager.callFunc("playQueue")
            return
        else
            stopLoadingSpinner()
            dialog = createObject("roSGNode", "Dialog")
            dialog.id = "OKDialog"
            dialog.title = tr("Missing deep link argument")
            dialog.buttons = [tr("OK")]
            dialog.message = "To play a season you must provide the seriesID"
            m.scene.dialog = dialog
            m.scene.dialog.observeField("buttonSelected", m.port)
        end if
    end if

    if mediaType = ItemType.BOXSET
        quickplay.boxset({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.COLLECTIONFOLDER
        if isValidAndNotEmpty(args.collectionType)
            quickplay.collectionFolder({
                id: args.contentId,
                type: mediaType,
                collectionType: LCase(args.collectionType)
            })
            m.global.queueManager.callFunc("playQueue")
            return
        else
            stopLoadingSpinner()
            dialog = createObject("roSGNode", "Dialog")
            dialog.id = "OKDialog"
            dialog.title = tr("Missing deep link argument")
            dialog.buttons = [tr("OK")]
            dialog.message = "To play a collection folder you must provide the collectionType"
            m.scene.dialog = dialog
            m.scene.dialog.observeField("buttonSelected", m.port)
        end if
    end if

    if mediaType = ItemType.PLAYLIST
        quickplay.playlist({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.USERVIEW
        if isValidAndNotEmpty(args.collectionType)
            quickplay.userView({
                id: args.contentId,
                type: mediaType,
                collectionType: args.collectionType
            })
            m.global.queueManager.callFunc("playQueue")
            return
        else
            stopLoadingSpinner()
            dialog = createObject("roSGNode", "Dialog")
            dialog.id = "OKDialog"
            dialog.title = tr("Missing deep link argument")
            dialog.buttons = [tr("OK")]
            dialog.message = "To play a userview you must provide the collectionType"
            m.scene.dialog = dialog
            m.scene.dialog.observeField("buttonSelected", m.port)
        end if
    end if

    if mediaType = ItemType.FOLDER
        quickplay.folder({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.MUSICVIDEO
        quickplay.musicVideo({
            id: args.contentId,
            type: mediaType,
            json: {}
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.PERSON
        quickplay.person({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.TVCHANNEL
        quickplay.tvChannel({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.PROGRAM
        quickplay.program({
            id: args.contentId,
            type: mediaType,
            json: {
                ChannelId: ""
            }
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.PHOTO
        photoContent = CreateObject("roSGNode", "ContentNode")
        photoContent.id = args.contentId
        quickplay.photo(photoContent)
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    if mediaType = ItemType.PHOTOALBUM
        quickplay.photoAlbum({
            id: args.contentId,
            type: mediaType
        })
        m.global.queueManager.callFunc("playQueue")
        return
    end if

    stopLoadingSpinner()
    dialog = createObject("roSGNode", "Dialog")
    dialog.id = "OKDialog"
    dialog.title = tr("Media Type not supported")
    dialog.buttons = [tr("OK")]
    dialog.message = "The passed media type is not supported"
    m.scene.dialog = dialog
    m.scene.dialog.observeField("buttonSelected", m.port)
end sub

sub onLibrarySelection(selectedItem)
    if selectedItem.collectionType = "movies"
        group = CreateVisualLibraryScene(selectedItem, ItemType.MOVIE)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if isStringEqual(selectedItem.collectionType, "tvshows")
        group = CreateVisualLibraryScene(selectedItem, ItemType.SERIES)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if isStringEqual(selectedItem.collectionType, "musicvideos")
        group = CreateVisualLibraryScene(selectedItem, ItemType.MUSICVIDEO)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if isStringEqual(selectedItem.collectionType, "homevideos")
        group = CreateVisualLibraryScene(selectedItem, ItemType.PHOTO)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if isStringEqual(selectedItem.collectionType, "boxsets")
        group = CreateVisualLibraryScene(selectedItem, ItemType.BOXSET)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if selectedItem.collectionType = "music"
        group = CreateMusicLibraryView(selectedItem)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if selectedItem.collectionType = "books"
        group = CreateBookLibraryView(selectedItem)
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    if selectedItem.collectionType = "nextup"
        group = CreateItemGrid(selectedItem)
        group.optionsAvailable = false
        m.global.sceneManager.callFunc("pushScene", group)
        return
    end if

    group = CreateItemGrid(selectedItem)
    m.global.sceneManager.callFunc("pushScene", group)
end sub

sub onRefreshSeasonDetailsDataEvent()
    startLoadingSpinner()

    currentScene = m.global.sceneManager.callFunc("getActiveScene")

    if isValid(currentScene) and isValid(currentScene.objects) and isValid(currentScene.seasonData)
        currentEpisode = m.global.queueManager.callFunc("getCurrentItem")

        if isValid(currentScene.objects.Items) and isValid(currentEpisode) and isValid(currentEpisode.id)
            ' Find the object in the scene's data and update its json data
            for i = 0 to currentScene.objects.Items.count() - 1
                if LCase(currentScene.objects.Items[i].id) = LCase(currentEpisode.id)
                    currentScene.objects.Items[i].json = api.users.GetItem(m.global.session.user.id, currentEpisode.id)
                    m.global.queueManager.callFunc("setTopStartingPoint", currentScene.objects.Items[i].json.UserData.PlaybackPositionTicks)
                    exit for
                end if
            end for
        end if

        seasonMetaData = ItemMetaData(currentScene.seasonData.id)
        if isValid(seasonMetaData) then currentScene.seasonData = seasonMetaData.json
        currentScene.episodeObjects = currentScene.objects
        currentScene.callFunc("updateSeason")
    end if

    stopLoadingSpinner()
end sub

sub onRefreshMovieDetailsDataEvent()
    startLoadingSpinner()
    canContinue = true

    currentScene = m.global.sceneManager.callFunc("getActiveScene")

    if isValid(currentScene.itemContent)
        ' Check if the content ID has changed since we last rendered the movie detail view
        contentIDChanged = false

        lastKnownItemExtraType = m.global.queueManager.callFunc("getLastKnownItemExtraType")
        if isValid(lastKnownItemExtraType)
            canContinue = lastKnownItemExtraType = ""
        end if

        currentItem = m.global.queueManager.callFunc("getLastKnownItemID")
        if canContinue
            if isValid(currentItem)
                canContinue = currentItem <> ""
            end if
        end if

        if canContinue
            if isChainValid(currentScene, "itemContent.id") and currentScene.itemContent.id <> currentItem
                currentItemID = currentItem
                contentIDChanged = true
            else
                currentItemID = currentScene.itemContent.id
            end if

            itemData = ItemMetaData(currentItemID)

            if contentIDChanged
                currentScene.selectedVideoStreamId = itemData.json.MediaSources[0].id

                ' Refresh extras based on new content ID
                extrasGrid = currentScene.findNode("extrasGrid")
                if isValid(extrasGrid)
                    ' If this is a multipart video, keep the original extras
                    if not isChainValid(currentScene, "additionalParts.masterID")
                        extrasGrid.callFunc("loadParts", itemData.json)
                    end if
                end if
            end if

            currentScene.itemContent = itemData

            ' Set updated starting point for the queue item
            m.global.queueManager.callFunc("setTopStartingPoint", itemData.json.UserData.PlaybackPositionTicks)
        end if
    end if

    stopLoadingSpinner()
end sub

sub onSelectedItemEvent(msg)
    ' If you select a library from ANYWHERE, follow this flow
    selectedItem = msg.getData()
    if isValid(selectedItem)
        startLoadingSpinner()
        selectedItemType = selectedItem.type

        if isValid(selectedItemType)
            ' If button selected is a string, lcase it
            if isStringEqual(type(selectedItemType), "rostring") then selectedItemType = LCase(selectedItemType)
        end if

        if selectedItemType = "collectionfolder"
            onLibrarySelection(selectedItem)
        else if selectedItemType = "boxset"
            group = CreateVisualLibraryScene(selectedItem, ItemType.BOXSET)
            m.global.sceneManager.callFunc("pushScene", group)
        else if selectedItemType = "folder" and isStringEqual(selectedItem.json.type, "genre")
            ' User clicked on a genre folder
            if selectedItem.json.MovieCount > 0
                group = CreateVisualLibraryScene(selectedItem, ItemType.MOVIE)
            else if selectedItem.json.SeriesCount > 0
                group = CreateVisualLibraryScene(selectedItem, ItemType.SERIES)
            else
                group = CreateItemGrid(selectedItem)
            end if
            m.global.sceneManager.callFunc("pushScene", group)
        else if isStringEqual(selectedItemType, "folder") and isStringEqual(selectedItem.json.LookupCI("type"), ItemType.PHOTOALBUM)
            group = CreateVisualLibraryScene(selectedItem, ItemType.PHOTOALBUM)
            m.global.sceneManager.callFunc("pushScene", group)
        else if selectedItemType = "folder" and LCase(type(selectedItem.json.type)) = "rostring" and isStringEqual(selectedItem.json.type, "musicgenre")
            group = CreateMusicLibraryView(selectedItem)
            m.global.sceneManager.callFunc("pushScene", group)
        else if selectedItemType = "userview" and isStringEqual(selectedItem.json.collectiontype, "livetv")
            group = CreateLiveTVLibraryView(selectedItem)
            m.global.sceneManager.callFunc("pushScene", group)
        else if selectedItemType = "userview" or selectedItemType = "folder" or selectedItemType = "channel"
            group = CreateItemGrid(selectedItem)
            m.global.sceneManager.callFunc("pushScene", group)
        else if selectedItemType = "episode" or selectedItemType = "recording"
            group = CreateMovieDetailsGroup(selectedItem)
        else if selectedItemType = "series"
            group = CreateSeriesDetailsGroup(selectedItem.json.id)
        else if selectedItemType = "season"
            if isValid(selectedItem.json) and isValid(selectedItem.json.SeriesId) and isValid(selectedItem.id)
                group = CreateSeasonDetailsGroupByID(selectedItem.json.SeriesId, selectedItem.id)
            else
                stopLoadingSpinner()
                message_dialog(tr("Error loading Season"))
            end if
        else if selectedItemType = "movie"
            ' open movie detail page
            group = CreateMovieDetailsGroup(selectedItem)
        else if selectedItemType = "person"
            CreatePersonView(selectedItem)
        else if selectedItemType = "tvchannel" or selectedItemType = "video" or selectedItemType = "program"
            ' User selected a Live TV channel / program
            ' Show Channel Loading spinner
            dialog = createObject("roSGNode", "ProgressDialog")
            dialog.title = tr("Loading Channel Data")
            m.scene.dialog = dialog

            ' User selected a program. Play the channel the program is on
            if selectedItemType = "program"
                selectedItem.id = selectedItem.json.LookupCI("ChannelId")
            end if

            ' Display playback options dialog
            showPlaybackOptionDialog = false

            if isValid(selectedItem.json)
                if isValid(selectedItem.json.userdata)
                    if isValid(selectedItem.json.userdata.PlaybackPositionTicks)
                        if selectedItem.json.userdata.PlaybackPositionTicks > 0
                            showPlaybackOptionDialog = true
                        end if
                    end if
                end if
            end if

            if showPlaybackOptionDialog
                dialog.close = true
                m.global.queueManager.callFunc("hold", selectedItem)
                playbackOptionDialog(selectedItem.json.userdata.PlaybackPositionTicks, selectedItem.json)
            else
                m.global.queueManager.callFunc("clear")
                m.global.queueManager.callFunc("push", selectedItem)
                m.global.queueManager.callFunc("playQueue")
                dialog.close = true
            end if

        else if selectedItemType = "photo"
            sceneNode = msg.getRoSGNode()

            if sceneNode.isSubType("VisualLibraryScene")
                photoPlayer = CreateObject("roSgNode", "PhotoDetails")
                photoPlayer.itemsNode = sceneNode.lastFocus
                photoPlayer.itemIndex = sceneNode.lastFocus.itemFocused
                m.global.sceneManager.callfunc("pushScene", photoPlayer)
            end if

            ' only handle selection if it's from the home screen
            if selectedItem.isSubType("HomeData")
                quickplay.photo(selectedItem)
            end if
        else if selectedItemType = "photoalbum"
            ' grab all photos inside photo album
            photoAlbumData = api.users.GetItemsByQuery(m.global.session.user.id, {
                "parentId": selectedItem.id,
                "includeItemTypes": "Photo",
                "Recursive": true
            })

            if isValid(photoAlbumData) and isValidAndNotEmpty(photoAlbumData.items)
                photoPlayer = CreateObject("roSgNode", "PhotoDetails")
                photoPlayer.itemsArray = photoAlbumData.items
                photoPlayer.itemIndex = 0
                m.global.sceneManager.callfunc("pushScene", photoPlayer)
            end if
        else if selectedItemType = "musicartist"
            group = CreateArtistView(selectedItem.json)
            if not isValid(group)
                stopLoadingSpinner()
                message_dialog(tr("Unable to find any albums or songs belonging to this artist"))
            end if
        else if selectedItemType = "musicalbum"
            CreateAlbumView(selectedItem.json)
        else if selectedItemType = "musicvideo"
            CreateMovieDetailsGroup(selectedItem)
        else if selectedItemType = "playlist"
            CreatePlaylistView(selectedItem.json)
        else if selectedItemType = "audio"
            m.global.queueManager.callFunc("clear")
            m.global.queueManager.callFunc("resetShuffle")
            m.global.queueManager.callFunc("push", selectedItem.json)
            m.global.queueManager.callFunc("playQueue")
        else if selectedItemType = "audiobook"
            ' Display playback options dialog
            showPlaybackOptionDialog = false

            if isValid(selectedItem.json)
                if isValid(selectedItem.json.userdata)
                    if isValid(selectedItem.json.userdata.PlaybackPositionTicks)
                        if selectedItem.json.userdata.PlaybackPositionTicks > 0
                            showPlaybackOptionDialog = true
                        end if
                    end if
                end if
            end if

            if showPlaybackOptionDialog
                m.global.queueManager.callFunc("hold", selectedItem)
                playbackOptionDialog(selectedItem.json.userdata.PlaybackPositionTicks, selectedItem.json)
            else
                m.global.queueManager.callFunc("clear")
                m.global.queueManager.callFunc("push", selectedItem.json)
                m.global.queueManager.callFunc("playQueue")
            end if
        else

            ' TODO - switch on more node types
            stopLoadingSpinner()
            message_dialog("This type is not yet supported: " + selectedItemType)
        end if
    end if
end sub

sub onMovieSelectedEvent(msg)
    startLoadingSpinner()
    node = getMsgPicker(msg, "picker")
    CreateMovieDetailsGroup(node)
end sub

sub onSeriesSelectedEvent(msg)
    startLoadingSpinner()
    node = getMsgPicker(msg, "picker")
    CreateSeriesDetailsGroup(node.id)
end sub

sub onSeasonSelectedEvent(msg)
    startLoadingSpinner()
    ptr = msg.getData()
    ' ptr is for [row, col] of selected item... but we only have 1 row
    series = msg.getRoSGNode()
    if isValid(ptr) and ptr.count() >= 2 and isValid(ptr[1]) and isValid(series) and isValid(series.seasonData) and isValid(series.seasonData.items)
        node = series.seasonData.items[ptr[1]]
        CreateSeasonDetailsGroup(series.itemContent, node)
    end if
end sub

sub onMusicAlbumSelectedEvent(msg)
    startLoadingSpinner()
    ptr = msg.getData()
    albums = msg.getRoSGNode()
    node = albums.musicArtistAlbumData.getChild(ptr)
    group = CreateAlbumView(node)
    if not isValid(group)
        stopLoadingSpinner()
    end if
end sub

sub onAppearsOnSelectedEvent(msg)
    startLoadingSpinner()
    ptr = msg.getData()
    albums = msg.getRoSGNode()
    node = albums.musicArtistAppearsOnData.getChild(ptr)
    group = CreateAlbumView(node)
    if not isValid(group)
        stopLoadingSpinner()
    end if
end sub

sub onPlaySongEvent(msg)
    ' User has selected audio they want us to play
    startLoadingSpinner()
    selectedIndex = msg.getData()
    screenContent = msg.getRoSGNode()

    m.global.queueManager.callFunc("resetShuffle")
    m.global.queueManager.callFunc("set", screenContent.albumData.getChildren(-1, 0))
    m.global.queueManager.callFunc("setPosition", selectedIndex)
    m.global.queueManager.callFunc("playQueue")
end sub

sub onSubtitleToDeleteEvent(msg)
    subtitleData = msg.getData()
    screenContent = msg.getRoSGNode()

    mySubtitleList = screenContent.findNode("mySubtitleList")

    if isAllValid([subtitleData, screenContent, mySubtitleList])
        if isAllValid([screenContent.itemContent.id, subtitleData.index, mySubtitleList.content])
            ' Ask the user for confirmation before deleting subtitle file
            returnValue = show_dialog("Are you sure you want to delete this subtitle?", ["Yes", "No, Cancel"], 1)

            ' User chose Yes from confirmation dialog
            if returnValue = 0
                ' Call delete subtitle API
                api.videos.DeleteSubtitle(screenContent.itemContent.id, subtitleData.index)

                ' We now need to remove the deleted subtitle from the My Subtitles list
                ' and subtract 1 from all indexs higher than the one we deleted
                subtitleListContent = mySubtitleList.content.getChildren(-1, 0)

                i = 0
                for each subtitle in subtitleListContent
                    ' Remove subtitle from My Subtitles list
                    if subtitle.index = subtitleData.index
                        mySubtitleList.content.removeChild(subtitle)
                    end if

                    ' Subtract 1 from indexes higher than deleted subtitle's index
                    if subtitle.index > subtitleData.index
                        subtitle.index--
                        mySubtitleList.content.replaceChild(subtitle, i)
                    end if

                    i++
                end for
            end if

            ' If there remain subtitles in My Subtitles list, set focus back to list
            ' Otherwise, set focus back to Search button
            if mySubtitleList.content.getChildCount() > 0
                mySubtitleList.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = mySubtitleList
            else
                searchButton = screenContent.findNode("searchButton")
                if isValid(searchButton)
                    searchButton.focus = true
                    searchButton.setFocus(true)
                    group = m.global.sceneManager.callFunc("getActiveScene")
                    group.lastFocus = searchButton
                end if
            end if
        end if
    end if
end sub

sub onSubtitleSearchButtonSelectedEvent()
    group = m.global.sceneManager.callFunc("getActiveScene")

    if isValid(group)
        if isAllValid([group.itemContent, group.selectedCulture])
            if isAllValid([group.itemContent.id, group.selectedCulture.ThreeLetterISOLanguageName])

                ' Get remote subtitles from API
                remoteSubtitles = api.items.SearchRemoteSubtitles(group.itemContent.id, group.selectedCulture.ThreeLetterISOLanguageName)

                if isValid(remoteSubtitles)
                    remoteSubtitleData = {
                        data: []
                    }

                    ' Populate data for remote subtitle dialog
                    for each remoteSubtitle in remoteSubtitles
                        remoteSubtitle.type = "remotesubtitleselect"
                        remoteSubtitle.track = {}
                        remoteSubtitle.track.description = remoteSubtitle.Name
                        remoteSubtitleData.data.push(remoteSubtitle)
                    end for

                    m.global.sceneManager.callFunc("remoteSubtitleDialog", tr("Download Subtitle"), remoteSubtitleData)
                    m.global.sceneManager.observeField("returnData", m.port)
                end if
            end if
        end if
    end if
end sub

sub onSubtitleLanguageButtonSelectedEvent()

    languageData = {
        data: []
    }

    ' Default to user's default subtitle language
    selectedCulture = "eng"

    group = m.global.sceneManager.callFunc("getActiveScene")
    if isValid(group)
        if isValid(group.selectedCulture)
            if isValidAndNotEmpty(group.selectedCulture.ThreeLetterISOLanguageName)
                selectedCulture = LCase(group.selectedCulture.ThreeLetterISOLanguageName)
            end if
        end if
    end if

    for each culture in group.cultures
        culture.type = "cultureselect"
        culture.Track = {}
        culture.Track.description = culture.displayname

        ' Put preferred subtitle language at the top of the language list
        if isValidAndNotEmpty(culture.ThreeLetterISOLanguageName)
            if LCase(culture.ThreeLetterISOLanguageName) = selectedCulture
                culture.selected = true
                languageData.data.unshift(culture)
            else
                languageData.data.push(culture)
            end if
        else
            languageData.data.push(culture)
        end if
    end for

    m.global.sceneManager.callFunc("radioDialog", tr("Select Language"), languageData)
    m.global.sceneManager.observeField("returnData", m.port)
end sub

sub onPlayItemEvent(msg)
    ' User has selected audio they want us to play
    startLoadingSpinner()
    selectedIndex = msg.getData()
    screenContent = msg.getRoSGNode()

    m.global.queueManager.callFunc("resetShuffle")
    m.global.queueManager.callFunc("set", screenContent.listData.getChildren(-1, 0))
    m.global.queueManager.callFunc("setPosition", selectedIndex)
    m.global.queueManager.callFunc("playQueue")
end sub

sub onPlayArtistSelectedEvent(msg)
    ' User has selected playlist of of audio they want us to play
    startLoadingSpinner()
    screenContent = msg.getRoSGNode()

    m.global.queueManager.callFunc("clear")
    m.global.queueManager.callFunc("resetShuffle")
    m.global.queueManager.callFunc("set", CreateArtistMix(screenContent.pageContent.id).Items)
    m.global.queueManager.callFunc("playQueue")
end sub

sub onInstantMixSelectedEvent(msg)
    ' User has selected instant mix
    ' User has selected playlist of of audio they want us to play
    screenContent = msg.getRoSGNode()
    startLoadingSpinner()

    viewHandled = false

    ' Create instant mix based on selected album
    if isValid(screenContent.albumData)
        if screenContent.albumData.getChildCount() > 0
            m.global.queueManager.callFunc("clear")
            m.global.queueManager.callFunc("resetShuffle")
            m.global.queueManager.callFunc("set", CreateInstantMix(screenContent.albumData.getChild(0).id).Items)
            m.global.queueManager.callFunc("playQueue")

            viewHandled = true
        end if
    end if

    if not viewHandled
        ' Create instant mix based on selected artist
        m.global.queueManager.callFunc("clear")
        m.global.queueManager.callFunc("resetShuffle")
        m.global.queueManager.callFunc("set", CreateInstantMix(screenContent.pageContent.id).Items)
        m.global.queueManager.callFunc("playQueue")
    end if
end sub

sub onSearch_valueEvent(msg)
    query = msg.getRoSGNode().search_value
    group = m.global.sceneManager.callFunc("getActiveScene")
    group.findNode("SearchBox").visible = false
    options = group.findNode("SearchSelect")
    options.visible = true
    options.setFocus(true)

    dialog = createObject("roSGNode", "ProgressDialog")
    dialog.title = tr("Loading Search Data")
    m.scene.dialog = dialog
    results = SearchMedia(query)
    dialog.close = true
    options.itemData = results
    options.query = query
end sub

' Search item selected
sub onItemSelectedEvent(msg)
    startLoadingSpinner()
    node = getMsgPicker(msg)
    ' TODO - swap this based on target.mediatype
    ' types: [ Series (Show), Episode, Movie, Audio, Person, Studio, MusicArtist, Recording ]
    if node.type = "Series"
        CreateSeriesDetailsGroup(node.id)
    else if node.type = "Movie"
        CreateMovieDetailsGroup(node)
    else if node.type = "MusicArtist"
        CreateArtistView(node.json)
    else if node.type = "MusicAlbum"
        CreateAlbumView(node.json)
    else if node.type = "MusicVideo"
        CreateMovieDetailsGroup(node)
    else if node.type = "Audio"
        m.global.queueManager.callFunc("clear")
        m.global.queueManager.callFunc("resetShuffle")
        m.global.queueManager.callFunc("push", node.json)
        m.global.queueManager.callFunc("playQueue")
    else if node.type = "Person"
        CreatePersonView(node)
    else if node.type = "TvChannel"

        thisItem = {
            id: node.id,
            type: "video"
        }

        m.global.queueManager.callFunc("clear")
        m.global.queueManager.callFunc("resetShuffle")
        m.global.queueManager.callFunc("push", thisItem)
        m.global.queueManager.callFunc("playQueue")
    else if node.type = "Episode"
        CreateMovieDetailsGroup(node)
    else if LCase(node.type) = "recording"
        thisItem = {
            id: node.id,
            type: "Episode"
        }

        m.global.queueManager.callFunc("clear")
        m.global.queueManager.callFunc("resetShuffle")
        m.global.queueManager.callFunc("push", thisItem)
        m.global.queueManager.callFunc("playQueue")
    else if node.type = "AudioBook"
        m.global.queueManager.callFunc("clear")
        m.global.queueManager.callFunc("resetShuffle")
        m.global.queueManager.callFunc("push", node.json)
        m.global.queueManager.callFunc("playQueue")
    else
        ' TODO - switch on more node types
        stopLoadingSpinner()
        message_dialog("This type is not yet supported: " + node.type + ".")
    end if
end sub

sub onButtonSelectedEvent(msg)
    ' If a button is selected, we have some determining to do
    btn = msg.getData()

    if isValid(btn)
        ' If button selected is a string, lcase it
        if LCase(type(btn)) = "rostring" then btn = LCase(btn)
    end if

    group = m.global.sceneManager.callFunc("getActiveScene")
    if type(btn) = "roInt"
        ' If there are no other button matches, check if this is a simple "OK" Dialog & Close if so
        dialog = msg.getRoSGNode()
        if dialog.id = "OKDialog"
            dialog.unobserveField("buttonSelected")
            dialog.close = true
        end if
    else if isValid(btn) and btn = "play-button"
        ' User chose Play button from movie detail view
        startLoadingSpinner()
        ' Check if a specific Audio Stream was selected
        audio_stream_idx = 0
        if isValid(group) and isValid(group.selectedAudioStreamIndex)
            audio_stream_idx = group.selectedAudioStreamIndex
        end if

        group.itemContent.selectedAudioStreamIndex = audio_stream_idx
        group.itemContent.id = group.selectedVideoStreamId

        ' Display playback options dialog
        if group.itemContent.json.userdata.PlaybackPositionTicks > 0
            m.global.queueManager.callFunc("hold", group.itemContent)
            playbackOptionDialog(group.itemContent.json.userdata.PlaybackPositionTicks, group.itemContent.json)
        else
            m.global.queueManager.callFunc("bypassNextPreferredAudioTrackIndexReset")
            m.global.queueManager.callFunc("clear")
            m.global.queueManager.callFunc("push", group.itemContent)
            m.global.queueManager.callFunc("playQueue")
        end if

        if isValid(group) and isValid(group.lastFocus) and isValid(group.lastFocus.id) and group.lastFocus.id = "main_group"
            buttons = group.findNode("buttons")
            if isValid(buttons)
                group.lastFocus = group.findNode("buttons")
            end if
        end if

        if isValid(group) and isValid(group.lastFocus)
            group.lastFocus.setFocus(true)
        end if
    else if isValid(btn) and btn = "part-button"
        group = m.global.sceneManager.callFunc("getActiveScene")

        partData = {
            data: [{
                id: group.additionalParts.masterID,
                type: "partselect",
                Track: {
                    description: "Part 1"
                }
            }]
        }

        selectedPart = string.EMPTY
        if isValid(group)
            if isValid(group.selectedPart)
                selectedPart = group.selectedPart.id
            end if
        end if

        i = 2

        for each part in group.additionalParts.parts.Items
            part.type = "partselect"
            part.Track = {}
            part.Track.description = `Part ${i}`

            if isValidAndNotEmpty(part.id)
                if part.id = selectedPart
                    part.selected = true
                end if
            end if

            partData.data.push(part)

            i++
        end for

        m.global.sceneManager.callFunc("radioDialog", tr("Select Part"), partData)
        m.global.sceneManager.observeField("returnData", m.port)
    else if isValid(btn) and btn = "trailer-button"
        ' User chose to play a trailer from the movie detail view
        startLoadingSpinner()
        dialog = createObject("roSGNode", "ProgressDialog")
        dialog.title = tr("Loading trailer")
        m.scene.dialog = dialog

        if isChainValid(group, "additionalParts.masterID")
            trailerData = api.users.GetLocalTrailers(m.global.session.user.id, group.additionalParts.masterID)
        else
            trailerData = api.users.GetLocalTrailers(m.global.session.user.id, group.id)
        end if

        if isValid(trailerData) and isValid(trailerData[0]) and isValid(trailerData[0].id)
            m.global.queueManager.callFunc("bypassNextPreferredAudioTrackIndexReset")
            m.global.queueManager.callFunc("set", trailerData)
            m.global.queueManager.callFunc("playQueue")
            dialog.close = true
        else
            stopLoadingSpinner()
        end if

        if isValid(group) and isValid(group.lastFocus)
            group.lastFocus.setFocus(true)
        end if
    else if isValid(btn) and btn = "watched-button"
        movie = group.itemContent
        if isValid(movie) and isValid(movie.watched) and isValid(movie.id)
            if movie.watched
                UnmarkItemWatched(movie.id)
            else
                MarkItemWatched(movie.id)
            end if
            movie.watched = not movie.watched
        end if
    else if isValid(btn) and btn = "favorite-button"
        movie = group.itemContent
        if movie.favorite
            UnmarkItemFavorite(movie.id)
        else
            MarkItemFavorite(movie.id)
        end if
        movie.favorite = not movie.favorite
    else if isValid(btn) and btn = "editsubtitlesbutton"
        subtitleSearchView = createObject("roSGNode", "SubtitleSearchView")
        subtitleSearchView.observeField("subtitleLanguageButtonSelected", m.port)
        subtitleSearchView.observeField("subtitleSearchButtonSelected", m.port)
        subtitleSearchView.observeField("subtitleToDelete", m.port)

        ' Set preferredSubtitleLanguage data so we can default the dropdown and popup correctly
        subtitleSearchView.cultures = api.localization.GetCultures()
        preferredSubtitleLanguage = m.global.session.user.configuration.SubtitleLanguagePreference
        if not isValidAndNotEmpty(preferredSubtitleLanguage)
            preferredSubtitleLanguage = "eng"
        end if

        subtitleSearchView.preferredSubtitleLanguage = preferredSubtitleLanguage

        ' Load the My Subtitles data now so it's up to date if user adds/deletes something it's updated
        ' If the data is bad, don't load the view
        metaData = ItemMetaData(group.itemContent.id)
        if isValidAndNotEmpty(metaData)
            subtitleSearchView.itemContent = metaData
            m.global.sceneManager.callFunc("pushScene", subtitleSearchView)
        end if
    else
        ' If there are no other button matches, check if this is a simple "OK" Dialog & Close if so
        dialog = msg.getRoSGNode()
        if dialog.id = "OKDialog"
            dialog.unobserveField("buttonSelected")
            dialog.close = true
        end if
    end if
end sub

sub onStateEvent(msg)
    node = msg.getRoSGNode()
    if isValid(node) and isValid(node.state)
        if node.selectedItemType = "TvChannel" and node.state = "finished"
            thisItem = {
                id: node.id,
                type: "recording"
            }

            m.global.queueManager.callFunc("clear")
            m.global.queueManager.callFunc("resetShuffle")
            m.global.queueManager.callFunc("push", thisItem)
            m.global.queueManager.callFunc("playQueue")
        else if node.state = "finished"
            node.control = "stop"

            ' If node allows retrying using Transcode Url, give that shot
            if isValid(node.retryWithTranscoding) and node.retryWithTranscoding
                thisItem = {
                    id: node.id,
                    type: m.global.queueManager.callFunc("getCurrentItem").type
                }

                m.global.queueManager.callFunc("clear")
                m.global.queueManager.callFunc("resetShuffle")
                m.global.queueManager.callFunc("push", thisItem)
                m.global.queueManager.callFunc("playQueue")
            else if not isValid(node.showID)
                m.global.sceneManager.callFunc("popScene")
            end if
        end if
    end if
end sub

sub onRoDeviceInfoEvent(msg)
    event = msg.GetInfo()

    if event.exitedScreensaver = true
        m.global.sceneManager.callFunc("resetTime")
        group = m.global.sceneManager.callFunc("getActiveScene")
        if isValid(group)
            ' refresh the current view
            if group.isSubType("JFScreen")
                group.callFunc("OnScreenShown")
            end if
        end if
    else if isValid(event.audioGuideEnabled)
        tmpGlobalDevice = m.global.device
        tmpGlobalDevice.AddReplace("isaudioguideenabled", event.audioGuideEnabled)

        ' update global device array
        m.global.setFields({ device: tmpGlobalDevice })
    else if isValid(event.generalMemoryLevel)
        ' This event will be sent first when the OS transitions from "normal" to "low" state and will continue to be sent while in "low" or "critical" states.
        '   - "normal" means that the general memory is within acceptable levels
        '   - "low" means that the general memory is below acceptable levels but not critical
        '   - "critical" means that general memory are at dangerously low level and that the OS may force terminate the application
        print "event.generalMemoryLevel = ", event.generalMemoryLevel
    else if isValid(event.audioCodecCapabilityChanged)
        ' The audio codec capability has changed if true.
        print "event.audioCodecCapabilityChanged = ", event.audioCodecCapabilityChanged

        postTask = createObject("roSGNode", "PostTask")
        postTask.arrayData = getDeviceCapabilities()
        postTask.apiUrl = "/Sessions/Capabilities/Full"
        postTask.control = "RUN"
    else if isValid(event.videoCodecCapabilityChanged)
        ' The video codec capability has changed if true.
        print "event.videoCodecCapabilityChanged = ", event.videoCodecCapabilityChanged

        postTask = createObject("roSGNode", "PostTask")
        postTask.arrayData = getDeviceCapabilities()
        postTask.apiUrl = "/Sessions/Capabilities/Full"
        postTask.control = "RUN"
    end if
end sub

sub onReturnDataEvent(msg)
    ' User has chosen an option in a radio dialog
    popupNode = msg.getData()
    if isValid(popupNode)
        if isValid(popupNode.type)
            if LCase(popupNode.type) = "partselect"
                m.global.sceneManager.unobserveField("returnData")

                activeScene = m.global.sceneManager.callFunc("getActiveScene")
                if isValid(activeScene)
                    activeScene.selectedPart = popupNode
                end if

                ' Close any open dialogs
                if m.global.sceneManager.callFunc("isDialogOpen")
                    m.global.sceneManager.callFunc("dismissDialog")
                end if
            end if

            if LCase(popupNode.type) = "cultureselect"
                activeScene = m.global.sceneManager.callFunc("getActiveScene")
                if isValid(activeScene)
                    activeScene.selectedCulture = popupNode
                end if

                ' Close any open dialogs
                if m.global.sceneManager.callFunc("isDialogOpen")
                    m.global.sceneManager.callFunc("dismissDialog")
                end if
            end if

            if LCase(popupNode.type) = "remotesubtitleselect"
                activeScene = m.global.sceneManager.callFunc("getActiveScene")
                if isAllValid([activeScene, popupNode.id])

                    mySubtitleList = activeScene.findNode("mySubtitleList")

                    ' Add downloading message to My Subtitles so users know we're processing their input
                    if isValid(mySubtitleList)
                        subtitleListContent = mySubtitleList.content

                        canAddSubtitle = true

                        ' Search list of subtitles to see if we already have a downloading message for this item
                        for each subtitle in subtitleListContent.getChildren(-1, 0)
                            if subtitle.index = -1
                                if isAllValid([subtitle.displaytitle, popupNode.Name])
                                    if LCase(subtitle.displaytitle) = LCase(popupNode.Name)
                                        canAddSubtitle = false
                                    end if
                                end if
                            end if
                        end for

                        ' Don't add multiple downloading message for the same subtitle name
                        if canAddSubtitle
                            mySubtitle = CreateObject("roSGNode", "SubtitleData")
                            mySubtitle.path = tr("Downloading - Refresh for updated status")
                            mySubtitle.index = -1
                            mySubtitle.displaytitle = popupNode.Name
                            mySubtitle.canDelete = false

                            subtitleListContent.insertChild(mySubtitle, 0)

                            mySubtitleList.content = subtitleListContent

                            api.items.DownloadRemoteSubtitles(activeScene.itemContent.id, popupNode.id)
                        end if
                    end if

                    ' Prevent double fires
                    popupNode.id = invalid
                end if

            end if
        end if
    end if
end sub

sub onDataReturnedEvent(msg)
    popupNode = msg.getRoSGNode()
    stopLoadingSpinner()

    if not isChainValid(popupNode, "returnData") then return

    selectedItem = m.global.queueManager.callFunc("getHold")
    m.global.queueManager.callFunc("clearHold")

    if not isValidAndNotEmpty(selectedItem) or not isValid(selectedItem[0]) then return

    selectedPopupAction = chainLookup(popupNode, "returndata.indexselected")

    'Resume video from resume point
    if selectedPopupAction = ResumePopupAction.RESUME
        selectedItem[0].startingPoint = chainLookup(selectedItem[0], "json.UserData.PlaybackPositionTicks") ?? 0
        playItem(true, selectedItem[0])
        return
    end if

    'Start Over from beginning selected, set position to 0
    if selectedPopupAction = ResumePopupAction.STARTOVER
        selectedItem[0].startingPoint = 0
        playItem(true, selectedItem[0])
        return
    end if

    ' User chose Go to series
    if selectedPopupAction = ResumePopupAction.GOTOSERIES
        CreateSeriesDetailsGroup(chainLookup(selectedItem[0], "json.SeriesId"))
        return
    end if

    ' User chose Go to season
    if selectedPopupAction = ResumePopupAction.GOTOSEASON
        seriesID = chainLookup(selectedItem[0], "json.SeriesId")
        seasonID = chainLookup(selectedItem[0], "json.seasonID")

        if isAllValid([seriesID, seasonID])
            CreateSeasonDetailsGroupByID(seriesID, seasonID)
        else
            message_dialog(tr("Error loading Season"))
        end if

        return
    end if

    ' User chose Go to episode
    if selectedPopupAction = ResumePopupAction.GOTOEPISODE
        CreateMovieDetailsGroup(selectedItem[0])
        return
    end if
end sub

sub playItem(bypassNextPreferredAudioTrackIndexReset as boolean, item as dynamic)
    startLoadingSpinner()

    if bypassNextPreferredAudioTrackIndexReset
        m.global.queueManager.callFunc("bypassNextPreferredAudioTrackIndexReset")
    end if

    m.global.queueManager.callFunc("clear")
    m.global.queueManager.callFunc("push", item)
    m.global.queueManager.callFunc("playQueue")
end sub
