import "pkg:/components/manager/ViewCreator.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/String.bs"

sub Main (args as dynamic) as void
    ' The main function that runs when the application is launched.
    m.screen = CreateObject("roSGScreen")

    ' Set global constants
    setConstants()

    ' Write screen tracker for screensaver
    WriteAsciiFile("tmp:/scene.temp", "")
    MoveFile("tmp:/scene.temp", "tmp:/scene")

    m.port = CreateObject("roMessagePort")
    m.screen.setMessagePort(m.port)

    ' Set any initial Global Variables
    m.global = m.screen.getGlobalNode()
    SaveAppToGlobal()
    SaveDeviceToGlobal()

    session.Init()

    ' update global LastRunVersion now that migrations are finished
    if m.global.app.version <> m.global.app.lastRunVersion
        set_setting("LastRunVersion", m.global.app.version)
    end if

    m.scene = m.screen.CreateScene("BaseScene")
    m.screen.show() ' vscode_rale_tracker_entry
    'vscode_rdb_on_device_component_entry

    playstateTask = CreateObject("roSGNode", "PlaystateTask")
    playstateTask.id = "playstateTask"

    sceneManager = CreateObject("roSGNode", "SceneManager")
    sceneManager.observeField("dataReturned", m.port)

    overhang = m.scene.findNode("overhang")
    if isValid(overhang)
        overhang.observeField("changeUserSelected", m.port)
    end if

    m.global.addFields({ app_loaded: false, playstateTask: playstateTask, sceneManager: sceneManager })
    m.global.addFields({ queueManager: CreateObject("roSGNode", "QueueManager") })
    m.global.addFields({ audioPlayer: CreateObject("roSGNode", "AudioPlayer") })
    m.global.addFields({ jumpTo: {} })

    m.global.observeField("jumpTo", m.port)

    audioMiniPlayer = m.scene.findNode("audioMiniPlayer")
    if isValid(audioMiniPlayer)
        audioMiniPlayer.callFunc("setup")
    end if

    app_start:
    ' First thing to do is validate the ability to use the API
    if not LoginFlow() then return

    ' remove login scenes from the stack
    sceneManager.callFunc("clearScenes")

    ' load home page
    group = CreateHomeGroup()
    group.callFunc("loadLibraries")
    stopLoadingSpinner()
    sceneManager.callFunc("pushScene", group)

    m.scene.observeField("exit", m.port)

    ' Downloads and stores a fallback font to tmp:/
    configEncoding = api.system.GetConfigurationByName("encoding")

    if isChainValid(configEncoding, "EnableFallbackFont")
        if configEncoding.EnableFallbackFont
            re = CreateObject("roRegex", "Name.:.(.*?).,.Size", "s")
            filename = APIRequest("FallbackFont/Fonts").GetToString()
            if isValid(filename)
                filename = re.match(filename)
                if isValidAndNotEmpty(filename)
                    filename = filename[1]
                    APIRequest("FallbackFont/Fonts/" + filename).gettofile("tmp:/font")
                end if
            end if
        end if
    end if

    ' Delete any old library filters
    for each settingKeys in m.global.session.user.settings.keys()
        if isStringEqual(left(settingKeys, 8), "display.")
            if isStringEqual(right(settingKeys, 7), ".filter") or isStringEqual(right(settingKeys, 14), ".filterOptions")
                m.global.session.user.settings.delete(settingKeys)
                unset_user_setting(settingKeys)
            end if
        end if
    end for

    ' Bypass What's New popup if server is Jellyfin demo
    if isStringEqual(m.global.session.server.url, "https://demo.jellyfin.org/stable")
        set_user_setting("LastRunVersion", m.global.app.version)
    end if

    ' Bypass What's New popup if deep linking arguments were passed
    if isValidAndNotEmpty(args.mediaType) and isValidAndNotEmpty(args.contentId)
        set_user_setting("LastRunVersion", m.global.app.version)
    end if

    ' Has the current user run this version before?
    usersLastRunVersion = m.global.session.user.settings.lastRunVersion
    if ChannelVersionUpdated(usersLastRunVersion)
        set_user_setting("LastRunVersion", m.global.app.version)
        ' show what's new popup
        if m.global.session.user.settings["load.allowwhatsnew"]
            m.global.sceneManager.callFunc("whatsNewDialog")
        end if
    end if

    ' Handle input messages
    input = CreateObject("roInput")
    input.SetMessagePort(m.port)

    device = CreateObject("roDeviceInfo")
    device.setMessagePort(m.port)
    device.EnableScreensaverExitedEvent(true)
    device.EnableAppFocusEvent(true)
    device.EnableLowGeneralMemoryEvent(true)
    device.EnableLinkStatusEvent(true)
    device.EnableCodecCapChangedEvent(true)
    device.EnableAudioGuideChangedEvent(true)

    ' Check if we were sent content to play with the startup command (Deep Link)
    onDeepLinkingEvent(args)

    while true
        msg = wait(0, m.port)

        if type(msg) = "roSGScreenEvent" and msg.isScreenClosed()
            print "CLOSING SCREEN"
            return
        end if

        if isNodeEvent(msg, "exit")
            print "CLOSING SCREEN"
            return
        end if

        if isNodeEvent(msg, "jumpTo")
            onJumpToEvent(msg)
        else if isNodeEvent(msg, "closeSidePanel")
            onCloseSidePanelEvent()
        else if isNodeEvent(msg, "quickPlayNode")
            onQuickPlayEvent(msg)
        else if isNodeEvent(msg, "refreshSeasonDetailsData")
            onRefreshSeasonDetailsDataEvent()
        else if isNodeEvent(msg, "refreshMovieDetailsData")
            onRefreshMovieDetailsDataEvent()
        else if isNodeEvent(msg, "selectedItem")
            onSelectedItemEvent(msg)
        else if isNodeEvent(msg, "movieSelected")
            onMovieSelectedEvent(msg)
        else if isNodeEvent(msg, "seriesSelected")
            onSeriesSelectedEvent(msg)
        else if isNodeEvent(msg, "seasonSelected")
            onSeasonSelectedEvent(msg)
        else if isNodeEvent(msg, "musicAlbumSelected")
            onMusicAlbumSelectedEvent(msg)
        else if isNodeEvent(msg, "appearsOnSelected")
            onAppearsOnSelectedEvent(msg)
        else if isNodeEvent(msg, "playSong")
            onPlaySongEvent(msg)
        else if isNodeEvent(msg, "subtitleToDelete")
            onSubtitleToDeleteEvent(msg)
        else if isNodeEvent(msg, "subtitleSearchButtonSelected")
            onSubtitleSearchButtonSelectedEvent()
        else if isNodeEvent(msg, "subtitleLanguageButtonSelected")
            onSubtitleLanguageButtonSelectedEvent()
        else if isNodeEvent(msg, "playlistItemSelected")
            onPlaylistItemSelectedEvent(msg)
        else if isNodeEvent(msg, "playArtistSelected")
            onPlayArtistSelectedEvent(msg)
        else if isNodeEvent(msg, "instantMixSelected")
            onInstantMixSelectedEvent(msg)
        else if isNodeEvent(msg, "search_value")
            onSearch_valueEvent(msg)
        else if isNodeEvent(msg, "itemSelected")
            onItemSelectedEvent(msg)
        else if isNodeEvent(msg, "buttonSelected")
            onButtonSelectedEvent(msg)
        else if isNodeEvent(msg, "changeUserSelected")
            SignOut(false)
            sceneManager.callFunc("clearScenes")
            goto app_start
        else if isNodeEvent(msg, "optionSelected")
            button = msg.getRoSGNode()
            group = sceneManager.callFunc("getActiveScene")
            if button.id = "goto_search" and isValid(group)
                ' Exit out of the side panel
                panel = group.findNode("options")
                panel.visible = false
                if isValid(group.lastFocus)
                    group.lastFocus.setFocus(true)
                else
                    group.setFocus(true)
                    group.lastFocus = group
                end if
                group = CreateSearchPage()
                sceneManager.callFunc("pushScene", group)
                group.findNode("SearchBox").findNode("search_Key").setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = group.findNode("SearchBox").findNode("search_Key")
                group.findNode("SearchBox").findNode("search_Key").active = true
            else if button.id = "change_server"
                unset_setting("server")
                session.server.Delete()
                SignOut(false)
                sceneManager.callFunc("clearScenes")
                goto app_start
            else if button.id = "change_user"
                SignOut(false)
                sceneManager.callFunc("clearScenes")
                goto app_start
            else if button.id = "sign_out"
                SignOut()
                sceneManager.callFunc("clearScenes")
                goto app_start
            else if button.id = "settings"
                ' Exit out of the side panel
                panel = group.findNode("options")
                panel.visible = false
                if isValid(group) and isValid(group.lastFocus)
                    group.lastFocus.setFocus(true)
                else
                    group.setFocus(true)
                end if
                sceneManager.callFunc("settings")
            end if
        else if isNodeEvent(msg, "state")
            onStateEvent(msg)
        else if type(msg) = "roDeviceInfoEvent"
            onRoDeviceInfoEvent(msg)
        else if type(msg) = "roInputEvent"
            if msg.IsInput()
                info = msg.GetInfo()
                onDeepLinkingEvent(info)
            end if
        else if isNodeEvent(msg, "returnData")
            onReturnDataEvent(msg)
        else if isNodeEvent(msg, "dataReturned")
            onDataReturnedEvent(msg)
        else
            print "Unhandled " type(msg)
            print msg
        end if
    end while
end sub
