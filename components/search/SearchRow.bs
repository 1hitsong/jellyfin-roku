import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/api/Items.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"

sub init()
    m.top.content = getData()
end sub

function getData()
    data = CreateObject("roSGNode", "ContentNode")

    itemData = m.top.itemData

    if not isValid(itemData)
        return data
    end if

    ' Do this to keep the ordering, AssociateArrays have no order
    type_array = ["Movie", "Series", "TvChannel", "Episode", "MusicArtist", "MusicAlbum", "Audio", "Person", "PlaylistsFolder", "Program"]
    content_types = {
        "TvChannel": { "label": "Channels", "count": 0 },
        "Movie": { "label": "Movies", "count": 0 },
        "Series": { "label": "Shows", "count": 0 },
        "Episode": { "label": "Episodes", "count": 0 },
        "MusicArtist": { "label": "Artists", "count": 0 },
        "MusicAlbum": { "label": "Albums", "count": 0 },
        "Audio": { "label": "Songs", "count": 0 },
        "Person": { "label": "People", "count": 0 },
        "PlaylistsFolder": { "label": "Playlist", "count": 0 },
        "Program": { "label": "Programs", "count": 0 }
    }

    for each item in itemData.Items
        if content_types[item.type] <> invalid
            content_types[item.type].count += 1
        end if
    end for

    for each ctype in type_array
        content_type = content_types[ctype]
        if content_type.count > 0
            addRow(data, content_type.label, ctype)
        end if
    end for

    m.top.content = data
    return data
end function

sub addRow(data, title, type_filter)
    itemData = m.top.itemData
    row = data.CreateChild("ContentNode")
    row.title = title
    for each item in itemData.Items
        if item.type = type_filter
            if isStringEqual(item.type, ItemType.PROGRAM)
                localStartDate = createObject("roDateTime")
                localStartDate.FromISO8601String(item.json.StartDate)
                localStartDate.ToLocalTime()
                item.title = `${item.title} -- ${localStartDate.asDateStringLoc("short")} ${localStartDate.asTimeStringLoc("short")}`
            end if
            row.appendChild(item)
        end if
    end for
end sub
