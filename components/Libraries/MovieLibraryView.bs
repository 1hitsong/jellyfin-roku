import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/String.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub setupNodes()
    m.options = m.top.findNode("options")
    m.itemGrid = m.top.findNode("itemGrid")
    m.voiceBox = m.top.findNode("voiceBox")
    m.backdrop = m.top.findNode("backdrop")
    m.newBackdrop = m.top.findNode("backdropTransition")
    m.emptyText = m.top.findNode("emptyText")
    m.selectedMovieName = m.top.findNode("selectedMovieName")
    m.selectedMovieOverview = m.top.findNode("selectedMovieOverview")
    m.selectedMovieProductionYear = m.top.findNode("selectedMovieProductionYear")
    m.selectedMovieOfficialRating = m.top.findNode("selectedMovieOfficialRating")
    m.movieLogo = m.top.findNode("movieLogo")
    m.swapAnimation = m.top.findNode("backroundSwapAnimation")
    m.alpha = m.top.findNode("alpha")
    m.alphaMenu = m.alpha.findNode("alphaMenu")
    m.communityRatingGroup = m.top.findNode("communityRatingGroup")
    m.criticRatingIcon = m.top.findNode("criticRatingIcon")
    m.criticRatingGroup = m.top.findNode("criticRatingGroup")
    m.overhang = m.top.getScene().findNode("overhang")
    m.genreList = m.top.findNode("genrelist")
    m.infoGroup = m.top.findNode("infoGroup")
    m.star = m.top.findNode("star")
    m.dropdownOptions = m.top.findNode("dropdownOptions")
    m.submitButton = m.top.findNode("submitButton")

    m.sortButton = m.top.findNode("sortButton")
    m.sortButton.textColor = ColorPalette.DARKGREY
    m.sortButton.focusTextColor = ColorPalette.WHITE
    m.sortButton.background = ColorPalette.WHITE
    m.sortButton.focusBackground = ColorPalette.HIGHLIGHT

    m.sortOrderButton = m.top.findNode("sortOrderButton")
    m.sortOrderButton.textColor = ColorPalette.DARKGREY
    m.sortOrderButton.focusTextColor = ColorPalette.WHITE
    m.sortOrderButton.background = ColorPalette.WHITE
    m.sortOrderButton.focusBackground = ColorPalette.HIGHLIGHT

    m.filterButton = m.top.findNode("filterButton")
    m.filterButton.textColor = ColorPalette.DARKGREY
    m.filterButton.focusTextColor = ColorPalette.WHITE
    m.filterButton.background = ColorPalette.WHITE
    m.filterButton.focusBackground = ColorPalette.HIGHLIGHT

    m.viewButton = m.top.findNode("viewButton")
    m.viewButton.textColor = ColorPalette.DARKGREY
    m.viewButton.focusTextColor = ColorPalette.WHITE
    m.viewButton.background = ColorPalette.WHITE
    m.viewButton.focusBackground = ColorPalette.HIGHLIGHT
end sub

sub init()
    m.top.optionsAvailable = false
    setupNodes()

    m.itemGrid.focusBitmapBlendColor = ColorPalette.HIGHLIGHT
    m.top.findNode("VoiceBoxCover").color = ColorPalette.VIEWBACKGROUND

    m.overhang.isVisible = false

    ' adjust alpha menu mic icon since there is no overhang
    alphaMic = m.alpha.findNode("alphaMic")
    alphaMic.translation = [60, 62]
    alphaMicText = m.alpha.findNode("alphaMicText")
    alphaMicText.visible = false

    m.showItemCount = m.global.session.user.settings["itemgrid.showItemCount"]

    m.swapAnimation.observeField("state", "swapDone")
    m.options.observeField("visible", "onOptionsVisibleChange")

    m.loadedRows = 0
    m.loadedItems = 0

    m.data = CreateObject("roSGNode", "ContentNode")

    m.itemGrid.content = m.data

    m.genreData = CreateObject("roSGNode", "ContentNode")
    m.genreList.observeField("itemSelected", "onGenreItemSelected")
    m.genreList.content = m.genreData

    m.itemGrid.observeField("itemFocused", "onItemFocused")
    m.itemGrid.observeField("itemSelected", "onItemSelected")

    'Voice filter setup
    m.voiceBox.voiceEnabled = true
    m.voiceBox.active = true
    m.voiceBox.observeField("text", "onvoiceFilter")
    'set voice help text
    m.voiceBox.hintText = tr("Use voice remote to search")

    'backdrop
    m.newBackdrop.observeField("loadStatus", "newBGLoaded")

    'Background Image Queued for loading
    m.queuedBGUri = string.EMPTY

    'Item sort
    m.sortField = "SortName"
    m.sortAscending = true

    m.filter = "All"
    m.filterOptions = {}

    m.view = "Movies"

    m.loadItemsTask = createObject("roSGNode", "LoadItemsTask2")
    m.loadLogoTask = createObject("roSGNode", "LoadItemsTask2")
    m.getFiltersTask = createObject("roSGNode", "GetFiltersTask")

    'set inital counts for overhang before content is loaded.
    m.loadItemsTask.totalRecordCount = 0
end sub

sub OnScreenHidden()
    if not m.overhang.isVisible
        m.overhang.disableMoveAnimation = true
        m.overhang.isVisible = true
        m.overhang.disableMoveAnimation = false
    end if
end sub

sub OnScreenShown()
    m.overhang.isVisible = false

    if m.top.lastFocus <> invalid
        m.top.lastFocus.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.top.lastFocus
    else
        m.top.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.top
    end if
end sub

'
'Load initial set of Data
sub loadInitialItems()
    m.loadItemsTask.control = "stop"
    startLoadingSpinner(false)

    if m.top.parentItem.json.Type = "CollectionFolder"
        m.top.HomeLibraryItem = m.top.parentItem.Id
    end if

    if m.top.parentItem.backdropUrl <> invalid
        SetBackground(m.top.parentItem.backdropUrl)
    else
        SetBackground(string.EMPTY)
    end if

    m.sortField = m.global.session.user.settings["display." + m.top.parentItem.Id + ".sortField"]
    m.filter = m.global.session.user.settings["display." + m.top.parentItem.Id + ".filter"]
    m.filterOptions = m.global.session.user.settings["display." + m.top.parentItem.Id + ".filterOptions"]
    m.view = m.global.session.user.settings["display." + m.top.parentItem.Id + ".landing"]
    m.sortAscending = m.global.session.user.settings["display." + m.top.parentItem.Id + ".sortAscending"]

    ' If user has not set a preferred view for this folder, check if they've set a default view
    if not isValid(m.view)
        m.view = m.global.session.user.settings["itemgrid.movieDefaultView"]
    end if

    if not isValidAndNotEmpty(m.sortField) then m.sortField = "SortName"
    if not isValidAndNotEmpty(m.filter) then m.filter = "All"
    if not isValidAndNotEmpty(m.filterOptions) then m.filterOptions = "{}"
    if not isValidAndNotEmpty(m.view) then m.view = "Movies"
    if not isValid(m.sortAscending) then m.sortAscending = true
    if not isStringEqual(type(m.sortAscending), "roBoolean") then m.sortAscending = true

    ' If view is not valid, use default view
    if not inArray(["Movies", "moviesgrid", "Genres"], m.view) then m.view = "Movies"

    m.filterOptions = ParseJson(m.filterOptions)

    if isStringEqual(m.view, "Genres")
        m.loadItemsTask.genreIds = m.top.parentItem.id
        m.loadItemsTask.itemId = m.top.parentItem.parentFolder
        m.loadItemsTask.studioIds = string.EMPTY
    else if isStringEqual(m.view, "Movies")
        m.loadItemsTask.studioIds = string.EMPTY
        m.loadItemsTask.genreIds = string.EMPTY
    else if isStringEqual(m.view, "moviesgrid")
        m.loadItemsTask.studioIds = string.EMPTY
        m.loadItemsTask.genreIds = string.EMPTY
    else
        m.loadItemsTask.itemId = m.top.parentItem.Id
    end if

    m.loadItemsTask.searchTerm = m.voiceBox.text
    m.emptyText.visible = false
    m.loadItemsTask.sortField = m.sortField
    m.loadItemsTask.sortAscending = m.sortAscending
    m.loadItemsTask.filter = m.filter
    m.loadItemsTask.filterOptions = m.filterOptions
    m.loadItemsTask.startIndex = 0

    ' Load Item Types
    if isStringEqual(getCollectionType(), "movies")
        m.loadItemsTask.itemType = ItemType.MOVIE
        m.loadItemsTask.itemId = m.top.parentItem.Id
    end if

    if isStringEqual(getCollectionType(), ItemType.BOXSET)
        m.loadItemsTask.itemType = ItemType.MOVIE
        m.loadItemsTask.itemId = m.top.parentItem.Id
    end if

    ' By default we load movies
    m.loadItemsTask.studioIds = string.EMPTY
    m.loadItemsTask.view = "Movies"

    m.itemGrid.translation = "[100, 670]"
    m.dropdownOptions.translation = "[100, 540]"
    m.itemGrid.itemSize = "[230, 345]"
    m.itemGrid.rowHeights = "[345]"
    m.itemGrid.numRows = "2"

    m.selectedMovieOverview.visible = true
    m.infoGroup.visible = true
    m.top.showItemTitles = "hidealways"

    m.movieLogo.visible = false
    m.backdrop.opacity = 1
    m.newBackdrop.opacity = 0

    if isStringEqual(m.view, "moviesgrid")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        m.newBackdrop.opacity = 0
        m.movieLogo.visible = false
        m.itemGrid.translation = "[100, 210]"
        m.dropdownOptions.translation = "[100, 60]"
        m.itemGrid.numRows = "3"
        m.selectedMovieOverview.visible = false
        m.infoGroup.visible = false
        m.top.showItemTitles = m.global.session.user.settings["itemgrid.gridTitles"]
        if isStringEqual(m.top.showItemTitles, "hidealways")
            m.itemGrid.itemSize = "[230, 350]"
            m.itemGrid.rowHeights = "[350]"
        else
            m.itemGrid.itemSize = "[230, 390]"
            m.itemGrid.rowHeights = "[390]"
        end if
    else if isStringEqual(m.view, "Genres")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        m.newBackdrop.opacity = 0
        m.loadItemsTask.StudioIds = m.top.parentItem.Id
        m.loadItemsTask.view = "Genres"
        m.dropdownOptions.translation = "[100, 60]"
        m.movieLogo.visible = false
        m.selectedMovieName.visible = false
        m.selectedMovieOverview.visible = false
        m.infoGroup.visible = false
    end if

    m.loadItemsTask.observeField("content", "ItemDataLoaded")
    m.loadItemsTask.control = "RUN"

    m.getFiltersTask.observeField("filters", "FilterDataLoaded")
    m.getFiltersTask.params = {
        userid: m.global.session.user.id,
        parentid: m.top.parentItem.Id,
        includeitemtypes: "Movie"
    }
    m.getFiltersTask.control = "RUN"
end sub

' Set Movies view, sort, and filter options
sub setMoviesOptions(options)

    options.views = [
        { "Title": tr("Movies (Presentation)"), "Name": "Movies", "Track": { "description": tr("Movies (Presentation)") } },
        { "Title": tr("Movies (Grid)"), "Name": "MoviesGrid", "Track": { "description": tr("Movies (Grid)") } },
        { "Title": tr("Genres"), "Name": "Genres", "Track": { "description": tr("Genres") } }
    ]

    options.sort = [
        { "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } },
        { "Title": tr("Random"), "Name": "Random", "Track": { "description": tr("Random") } },
        { "Title": tr("Community Rating"), "Name": "CommunityRating", "Track": { "description": tr("Community Rating") } },
        { "Title": tr("Critics Rating"), "Name": "CriticRating", "Track": { "description": tr("Critics Rating") } },
        { "Title": tr("DATE_ADDED"), "Name": "DateCreated", "Track": { "description": tr("DATE_ADDED") } },
        { "Title": tr("DATE_PLAYED"), "Name": "DatePlayed", "Track": { "description": tr("DATE_PLAYED") } },
        { "Title": tr("Parental Rating"), "Name": "OfficialRating", "Track": { "description": tr("Parental Rating") } },
        { "Title": tr("PLAY_COUNT"), "Name": "PlayCount", "Track": { "description": tr("PLAY_COUNT") } },
        { "Title": tr("RELEASE_DATE"), "Name": "PremiereDate", "Track": { "description": tr("RELEASE_DATE") } },
        { "Title": tr("RUNTIME"), "Name": "Runtime", "Track": { "description": tr("RUNTIME") } },
    ]

    options.filter = [
        { "Title": tr("All"), "Name": "All" },
        { "Title": tr("Played"), "Name": "Played" },
        { "Title": tr("Unplayed"), "Name": "Unplayed" },
        { "Title": tr("Resumable"), "Name": "Resumable" }
        { "Title": tr("Favorites"), "Name": "Favorites" },
    ]

    if isStringEqual(getCollectionType(), ItemType.BOXSET)
        options.views = [
            { "Title": tr("Movies (Presentation)"), "Name": "Movies", "Track": { "description": tr("Movies (Presentation)") } },
            { "Title": tr("Movies (Grid)"), "Name": "MoviesGrid", "Track": { "description": tr("Movies (Grid)") } },
        ]
    end if

    if isStringEqual(m.view, "Genres")
        options.sort = [{ "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } }]
        options.filter = [{ "Title": tr("All"), "Name": "All" },]
    end if
end sub

' Return parent collection type
function getCollectionType() as string
    if m.top.parentItem.collectionType = invalid
        return m.top.parentItem.Type
    else
        return m.top.parentItem.CollectionType
    end if
end function

' Search string array for search value. Return if it's found
function inStringArray(array, searchValue) as boolean
    for each item in array
        if lcase(item) = lcase(searchValue) then return true
    end for
    return false
end function

' Data to display when options button selected
sub setSelectedOptions(options)

    ' Set selected view option
    for each o in options.views
        if o.Name = m.view
            m.viewButton.text = o.LookupCI("title")
            o.Selected = true
        end if
    end for

    ' Set selected sort option
    for each o in options.sort
        if o.Name = m.sortField
            m.sortButton.text = o.LookupCI("title")
            o.Selected = true
        end if
    end for

    ' Set selected filter
    for each o in options.filter
        if o.Name = m.filter
            o.Selected = true
            m.filterButton.text = o.LookupCI("title")
            m.options.filter = o.Name
        end if

        ' Select selected filter options
        if isValid(o.options) and isValid(m.filterOptions)
            if o.options.Count() > 0 and m.filterOptions.Count() > 0
                if LCase(o.Name) = LCase(m.filterOptions.keys()[0])
                    selectedFilterOptions = m.filterOptions[m.filterOptions.keys()[0]].split(o.delimiter)
                    checkedState = []

                    for each availableFilterOption in o.options
                        matchFound = false

                        for each selectedFilterOption in selectedFilterOptions
                            if LCase(toString(availableFilterOption).trim()) = LCase(selectedFilterOption.trim())
                                matchFound = true
                            end if
                        end for

                        checkedState.push(matchFound)
                    end for

                    o.checkedState = checkedState
                end if
            end if
        end if
    end for

    m.options.options = options
    m.sortOrderButton.text = m.sortAscending ? "Ascending" : "Descending"
end sub

'
' Logo Image Loaded Event Handler
sub FilterDataLoaded(msg)
    options = {}
    options.filter = []

    setMoviesOptions(options)

    data = msg.GetData()
    m.getFiltersTask.unobserveField("filters")

    if not isValid(data) then return

    ' Add Movie filters from the API data
    if LCase(m.loadItemsTask.view) = "movies"
        options.filter.push({ "Title": tr("Features"), "Name": "Features", "Options": ["Subtitles", "Special Features", "Theme Song", "Theme Video"], "Delimiter": "|", "CheckedState": [] })

        if isValid(data.genres)
            options.filter.push({ "Title": tr("Genres"), "Name": "Genres", "Options": data.genres, "Delimiter": "|", "CheckedState": [] })
        end if

        if isValid(data.OfficialRatings)
            options.filter.push({ "Title": tr("Parental Ratings"), "Name": "OfficialRatings", "Options": data.OfficialRatings, "Delimiter": "|", "CheckedState": [] })
        end if

        if isValid(data.Years)
            options.filter.push({ "Title": tr("Years"), "Name": "Years", "Options": data.Years, "Delimiter": ",", "CheckedState": [] })
        end if
    end if

    setSelectedOptions(options)

    m.options.options = options
end sub


'
' Logo Image Loaded Event Handler
sub LogoImageLoaded(msg)
    data = msg.GetData()
    m.loadLogoTask.unobserveField("content")
    m.loadLogoTask.content = []

    if not isStringEqual(m.view, "Movies")
        m.movieLogo.visible = false
        return
    end if

    if data.Count() > 0
        m.movieLogo.uri = data[0]
        m.movieLogo.visible = true
    else
        m.selectedMovieName.visible = true
    end if
end sub

'
'Handle loaded data, and add to Grid
sub ItemDataLoaded(msg)
    itemData = msg.GetData()
    m.loadItemsTask.unobserveField("content")
    m.loadItemsTask.content = []

    if itemData = invalid
        m.Loading = false
        return
    end if

    if m.loadItemsTask.view = "Genres"
        ' Reset genre list data
        m.genreData.removeChildren(m.genreData.getChildren(-1, 0))

        for each item in itemData
            m.genreData.appendChild(item)
        end for

        m.itemGrid.opacity = "0"
        m.genreList.opacity = "1"

        m.itemGrid.setFocus(false)
        m.genreList.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.genreList

        m.loading = false
        stopLoadingSpinner()
        ' Return focus to options menu if it was opened while library was loading
        if m.options.visible
            m.options.setFocus(true)
            group.lastFocus = m.options
        end if
        return
    end if

    ' keep focus on alpha menu if it's active
    if m.top.alphaActive
        m.alphaMenu.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.alphaMenu
    else
        m.itemGrid.opacity = "1"
        m.genreList.opacity = "0"

        m.alphaMenu.setFocus(false)
        m.itemGrid.setFocus(true)
        m.genreList.setFocus(false)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.itemGrid
    end if

    if m.data.getChildCount() = 0
        m.itemGrid.jumpToItem = 0
    end if

    for each item in itemData
        m.data.appendChild(item)
    end for

    'Update the stored counts
    m.loadedItems = m.itemGrid.content.getChildCount()
    m.loadedRows = m.loadedItems / m.itemGrid.numColumns
    m.Loading = false
    'If there are no items to display, show message
    if m.loadedItems = 0
        m.selectedMovieOverview.visible = false
        m.infoGroup.visible = false

        m.movieLogo.visible = false
        m.movieLogo.uri = string.EMPTY

        m.selectedMovieName.visible = false

        SetName(string.EMPTY)
        SetOverview(string.EMPTY)
        SetOfficialRating(string.EMPTY)
        SetProductionYear(string.EMPTY)
        setFieldText("runtime", string.EMPTY)
        setFieldText("communityRating", string.EMPTY)
        setFieldText("criticRatingLabel", string.EMPTY)
        m.criticRatingIcon.uri = string.EMPTY
        m.star.uri = string.EMPTY

        m.emptyText.text = tr("NO_ITEMS").Replace("%1", m.top.parentItem.Type)
        m.emptyText.visible = true
        m.sortButton.focus = true
        m.sortButton.setfocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.sortButton
    end if

    stopLoadingSpinner()
    ' Return focus to options menu if it was opened while library was loading
    if m.options.visible
        m.options.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.options
    end if
end sub

'
'Set Selected Movie Name
sub SetName(movieName as string)
    m.selectedMovieName.text = movieName
end sub

'
'Set Selected Movie Overview
sub SetOverview(movieOverview as string)
    m.selectedMovieOverview.text = movieOverview
end sub

'
'Set Selected Movie OfficialRating
sub SetOfficialRating(movieOfficialRating as string)
    m.selectedMovieOfficialRating.text = movieOfficialRating
end sub

'
'Set Selected Movie ProductionYear
sub SetProductionYear(movieProductionYear)
    m.selectedMovieProductionYear.text = movieProductionYear
end sub

'
'Set Background Image
sub SetBackground(backgroundUri as string)
    if not isValid(backgroundUri)
        m.backdrop.opacity = 0
    end if

    if not isStringEqual(m.view, "Movies")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    'If a new image is being loaded, or transitioned to, store URL to load next
    if m.swapAnimation.state <> "stopped" or m.newBackdrop.loadStatus = "loading"
        m.queuedBGUri = backgroundUri
        return
    end if

    m.newBackdrop.uri = backgroundUri
end sub

'
'Handle new item being focused
sub onItemFocused()
    focusedRow = m.itemGrid.currFocusRow

    itemInt = m.itemGrid.itemFocused

    ' If no selected item, set background to parent backdrop
    if itemInt = -1
        return
    end if

    m.movieLogo.visible = false
    m.selectedMovieName.visible = false

    ' Load more data if focus is within last 5 rows, and there are more items to load
    if focusedRow >= m.loadedRows - 5 and m.loadeditems < m.loadItemsTask.totalRecordCount
        loadMoreData()
    end if

    m.selectedFavoriteItem = getItemFocused()
    m.communityRatingGroup.visible = false
    m.criticRatingGroup.visible = false

    if not isValid(m.selectedFavoriteItem)
        return
    end if

    if isStringEqual(m.view, "moviesgrid")
        return
    end if

    itemData = m.selectedFavoriteItem.json

    m.star.uri = "pkg:/images/sharp_star_white_18dp.png"

    if m.global.session.user.settings["ui.movies.showRatings"]
        if isValid(itemData.communityRating)
            setFieldText("communityRating", int(itemData.communityRating * 10) / 10)
            m.communityRatingGroup.visible = true
        end if

        if isValid(itemData.CriticRating)
            setFieldText("criticRatingLabel", itemData.criticRating)

            tomato = "pkg:/images/rotten.png"

            if itemData.CriticRating > 60
                tomato = "pkg:/images/fresh.png"
            end if

            m.criticRatingIcon.uri = tomato
            m.criticRatingGroup.visible = true
        end if
    end if

    if isValid(itemData.Name)
        SetName(itemData.Name)
    else
        SetName(string.EMPTY)
    end if

    if isValid(itemData.Overview)
        SetOverview(itemData.Overview)
    else
        SetOverview(string.EMPTY)
    end if

    if isValid(itemData.ProductionYear)
        SetProductionYear(str(itemData.ProductionYear))
    else
        SetProductionYear(string.EMPTY)
    end if

    if type(itemData.RunTimeTicks) = "LongInteger"
        setFieldText("runtime", stri(getRuntime(itemData.RunTimeTicks)) + " mins")
    else
        setFieldText("runtime", string.EMPTY)
    end if

    if isValid(itemData.OfficialRating)
        SetOfficialRating(itemData.OfficialRating)
    else
        SetOfficialRating(string.EMPTY)
    end if

    m.loadLogoTask.itemId = itemData.id
    m.loadLogoTask.itemType = "LogoImage"
    m.loadLogoTask.observeField("content", "LogoImageLoaded")
    m.loadLogoTask.control = "RUN"

    ' Set Background to item backdrop
    SetBackground(m.selectedFavoriteItem.backdropUrl)
end sub

function getRuntime(runTimeTicks) as integer
    return round(runTimeTicks / 600000000.0)
end function

function round(f as float) as integer
    ' BrightScript only has a "floor" round
    ' This compares floor to floor + 1 to find which is closer
    m = int(f)
    n = m + 1
    x = abs(f - m)
    y = abs(f - n)
    if y > x
        return m
    else
        return n
    end if
end function

sub setFieldText(field, value)
    node = m.top.findNode(field)
    if node = invalid or value = invalid then return

    ' Handle non strings... Which _shouldn't_ happen, but hey
    if type(value) = "roInt" or type(value) = "Integer"
        value = str(value)
    else if type(value) = "roFloat" or type(value) = "Float"
        value = str(value)
    else if type(value) <> "roString" and type(value) <> "String"
        value = string.EMPTY
    end if

    node.text = value
end sub

'
'When Image Loading Status changes
sub newBGLoaded()
    if not isStringEqual(m.view, "Movies")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    'If image load was sucessful, start the fade swap
    if m.newBackdrop.loadStatus = "ready"
        m.swapAnimation.control = "start"
    end if
end sub

'
'Swap Complete
sub swapDone()
    if not isStringEqual(m.view, "Movies")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    if isValid(m.swapAnimation) and m.swapAnimation.state = "stopped"
        'Set main BG node image and hide transitioning node
        m.backdrop.uri = m.newBackdrop.uri
        m.backdrop.opacity = 1
        m.newBackdrop.opacity = 0

        'If there is another one to load
        if m.newBackdrop.uri <> m.queuedBGUri and m.queuedBGUri <> string.EMPTY
            SetBackground(m.queuedBGUri)
            m.queuedBGUri = string.EMPTY
        end if
    end if
end sub

'
'Load next set of items
sub loadMoreData()
    if m.Loading = true then return

    startLoadingSpinner(false)
    m.Loading = true
    m.loadItemsTask.startIndex = m.loadedItems
    m.loadItemsTask.observeField("content", "ItemDataLoaded")
    m.loadItemsTask.control = "RUN"
end sub

'
'Item Selected
sub onItemSelected()
    m.top.selectedItem = m.itemGrid.content.getChild(m.itemGrid.itemSelected)
end sub

'
'Returns Focused Item
function getItemFocused()
    if m.itemGrid.isinFocusChain() and isValid(m.itemGrid.itemFocused)
        return m.itemGrid.content.getChild(m.itemGrid.itemFocused)
    else if m.genreList.isinFocusChain() and isValid(m.genreList.rowItemFocused)
        return m.genreList.content.getChild(m.genreList.rowItemFocused[0]).getChild(m.genreList.rowItemFocused[1])
    end if
    return invalid
end function

'
'Genre Item Selected
sub onGenreItemSelected()
    m.top.selectedItem = m.genreList.content.getChild(m.genreList.rowItemSelected[0]).getChild(m.genreList.rowItemSelected[1])
end sub

sub alphaSelectedChanged()
    ' Allow user to toggle by clicking letter twice
    if isStringEqual(m.loadItemsTask.nameStartsWith, m.top.alphaSelected)
        m.top.alphaSelected = string.EMPTY
    end if

    m.loadedRows = 0
    m.loadedItems = 0

    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data

    m.genreData = CreateObject("roSGNode", "ContentNode")
    m.genreList.content = m.genreData

    m.loadItemsTask.nameStartsWith = m.top.alphaSelected
    m.VoiceBox.text = string.EMPTY
    loadInitialItems()
end sub

sub onvoiceFilter()
    if not isValidAndNotEmpty(m.VoiceBox.text) then return

    if isStringEqual(m.voiceBox.text, "reset search") then m.voiceBox.text = string.EMPTY

    m.loadedRows = 0
    m.loadedItems = 0
    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data
    m.top.alphaSelected = string.EMPTY
    m.loadItemsTask.NameStartsWith = " "
    m.loadItemsTask.searchTerm = m.voiceBox.text
    m.loadItemsTask.recursive = true

    ' If user searched for a letter, selected it from the alpha menu
    if m.voiceBox.text.len() = 1
        alphaMenu = m.top.findNode("alphaMenu")
        intConversion = m.voiceBox.text.ToInt() ' non numeric input returns as 0

        if m.voiceBox.text = "0" or (isValid(intConversion) and intConversion <> 0)
            alphaMenu.jumpToItem = 0
        else
            ' loop through each option until we find a match
            for i = 1 to alphaMenu.numRows - 1
                alphaMenuOption = alphaMenu.content.getChild(i)
                if Lcase(alphaMenuOption.TITLE) = Lcase(m.voiceBox.text)
                    alphaMenu.jumpToItem = i
                    exit for
                end if
            end for
        end if
    end if

    loadInitialItems()
end sub


'
'Check if options updated and any reloading required
sub onOptionsVisibleChange()
    if m.options.visible then return

    reload = false

    ' Check if nothing changed
    if isStringEqual(m.options.filter, m.filter)
        if AssocArrayEqual(m.options.filterOptions, m.filterOptions)
            m.filterButton.focus = false

            m.itemGrid.setFocus(m.itemGrid.opacity = 1)
            m.genreList.setFocus(m.genreList.opacity = 1)

            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
            return
        end if
    end if

    if m.options.filter <> m.filter
        m.filter = m.options.filter
        reload = true
        set_user_setting("display." + m.top.parentItem.Id + ".filter", m.options.filter)
    end if

    if not isValid(m.options.filterOptions)
        m.filterOptions = {}
    end if

    if not AssocArrayEqual(m.options.filterOptions, m.filterOptions)
        m.filterOptions = m.options.filterOptions
        reload = true
        set_user_setting("display." + m.top.parentItem.Id + ".filterOptions", FormatJson(m.options.filterOptions))
    end if

    if reload
        m.loadedRows = 0
        m.loadedItems = 0
        m.data = CreateObject("roSGNode", "ContentNode")
        m.itemGrid.content = m.data
        loadInitialItems()
    end if

    m.filterButton.focus = false

    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    group = m.global.sceneManager.callFunc("getActiveScene")
    group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
end sub

sub onSortChange()
    m.global.sceneManager.unobserveFieldScoped("returnData")
    sortChoice = m.global.sceneManager.returnData
    m.sortButton.focus = false

    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    if not isStringEqual(sortChoice.LookupCI("name"), m.sortField)
        m.sortField = sortChoice.LookupCI("name")
        m.sortButton.text = sortChoice.LookupCI("title")

        m.sortAscending = true

        set_user_setting("display." + m.top.parentItem.Id + ".sortField", m.sortField)

        m.loadedRows = 0
        m.loadedItems = 0
        m.data = CreateObject("roSGNode", "ContentNode")
        m.itemGrid.content = m.data
        loadInitialItems()
    end if
end sub

sub onViewChange()
    m.global.sceneManager.unobserveFieldScoped("returnData")
    viewChoice = m.global.sceneManager.returnData
    m.viewButton.focus = false

    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    if not isStringEqual(viewChoice.LookupCI("name"), m.view)
        m.view = viewChoice.LookupCI("name")
        m.viewButton.text = viewChoice.LookupCI("title")

        set_user_setting("display." + m.top.parentItem.Id + ".landing", m.view)

        ' Reset any filtering or search terms
        m.top.alphaSelected = string.EMPTY
        m.loadItemsTask.NameStartsWith = " "
        m.loadItemsTask.searchTerm = string.EMPTY
        m.filter = "All"
        m.filterOptions = {}
        m.sortField = "SortName"
        m.sortAscending = true

        ' Reset view to defaults
        set_user_setting("display." + m.top.parentItem.Id + ".sortField", m.sortField)
        set_user_setting("display." + m.top.parentItem.Id + ".sortAscending", "true")
        set_user_setting("display." + m.top.parentItem.Id + ".filter", m.filter)
        set_user_setting("display." + m.top.parentItem.Id + ".filterOptions", FormatJson(m.filterOptions))

        m.getFiltersTask.control = "RUN"

        m.loadedRows = 0
        m.loadedItems = 0
        m.data = CreateObject("roSGNode", "ContentNode")
        m.itemGrid.content = m.data
        loadInitialItems()
    end if
end sub

sub onSortOrderChange()
    m.global.sceneManager.unobserveFieldScoped("returnData")
    sortOrderChoice = m.global.sceneManager.returnData
    m.sortOrderButton.focus = false

    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    if not isStringEqual(sortOrderChoice.LookupCI("name"), m.sortAscending.toStr())

        m.sortAscending = isStringEqual(sortOrderChoice.LookupCI("name"), "Ascending")
        m.sortOrderButton.text = sortOrderChoice.LookupCI("title")

        set_user_setting("display." + m.top.parentItem.Id + ".sortAscending", m.sortAscending.toStr())

        m.loadedRows = 0
        m.loadedItems = 0
        m.data = CreateObject("roSGNode", "ContentNode")
        m.itemGrid.content = m.data
        loadInitialItems()
    end if
end sub


function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if isStringEqual(key, KeyCode.UP)
        if m.itemGrid.isinFocusChain() or m.genreList.isinFocusChain()
            m.sortButton.focus = true
            m.sortButton.setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.sortButton
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.OK)
        if m.sortButton.isinFocusChain()
            sortData = {
                data: m.options.options.sort
            }

            m.global.sceneManager.callFunc("radioDialog", tr("Sort By"), sortData)
            m.global.sceneManager.observeFieldScoped("returnData", "onSortChange")
            return true
        end if

        if m.sortOrderButton.isinFocusChain()
            sortOrderData = {
                data: [
                    { Title: tr("Ascending"), Name: "ascending", Track: { description: tr("Ascending") } },
                    { Title: tr("Descending"), Name: "descending", Track: { description: tr("Descending") } },
                ]
            }

            if m.sortAscending
                sortOrderData.data[0].selected = true
            else
                sortOrderData.data[1].selected = true
            end if

            m.global.sceneManager.callFunc("radioDialog", tr("Sort Order"), sortOrderData)
            m.global.sceneManager.observeFieldScoped("returnData", "onSortOrderChange")
            return true
        end if

        if m.filterButton.isinFocusChain()
            m.options.visible = true
            m.options.findNode("filterMenu").setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.options
            return true
        end if

        if m.viewButton.isinFocusChain()
            viewData = {
                data: m.options.options.views
            }

            m.global.sceneManager.callFunc("radioDialog", tr("View"), viewData)
            m.global.sceneManager.observeFieldScoped("returnData", "onViewChange")
            return true
        end if
    end if

    if m.dropdownOptions.isinFocusChain()
        if isStringEqual(key, KeyCode.LEFT)
            if m.sortButton.isinFocusChain()
                m.sortButton.focus = false
                m.viewButton.focus = false
                m.filterButton.focus = false

                m.top.alphaActive = true
                m.alphaMenu.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.alphaMenu
                return true
            end if

            if m.sortOrderButton.isinFocusChain()
                m.sortButton.focus = true
                m.sortButton.setFocus(true)
                m.sortOrderButton.focus = false
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortButton
                return true
            end if

            if m.filterButton.isinFocusChain()
                m.filterButton.focus = false
                m.sortOrderButton.focus = true
                m.sortOrderButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortOrderButton
                return true
            end if

            if m.viewButton.isinFocusChain()
                m.viewButton.focus = false
                m.filterButton.focus = true
                m.filterButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.filterButton
                return true
            end if
        end if

        if isStringEqual(key, KeyCode.Right)
            if m.sortButton.isinFocusChain()
                m.sortButton.focus = false
                m.sortOrderButton.focus = true
                m.sortOrderButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortOrderButton
                return true
            end if

            if m.sortOrderButton.isinFocusChain()
                m.sortOrderButton.focus = false
                m.filterButton.focus = true
                m.filterButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.filterButton
                return true
            end if

            if m.filterButton.isinFocusChain()
                m.filterButton.focus = false
                m.viewButton.focus = true
                m.viewButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.viewButton
                return true
            end if
        end if

        if isStringEqual(key, KeyCode.DOWN)
            if m.loadedItems = 0 then return false

            m.sortButton.focus = false
            m.viewButton.focus = false
            m.filterButton.focus = false

            m.itemGrid.setFocus(m.itemGrid.opacity = 1)
            m.genreList.setFocus(m.genreList.opacity = 1)

            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.itemGrid
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.LEFT) and m.voiceBox.isinFocusChain()
        m.itemGrid.setFocus(m.itemGrid.opacity = 1)
        m.genreList.setFocus(m.genreList.opacity = 1)
        m.voiceBox.setFocus(false)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
    end if

    if isStringEqual(key, KeyCode.BACK)
        ' If user pressed back whole scrolled down the grid, reset to item 1
        if m.itemGrid.isinFocusChain() or m.genreList.isinFocusChain()
            gridComponent = m.itemGrid.isinFocusChain() ? m.itemGrid : m.genreList

            if gridComponent.itemFocused = 0
                m.loadItemsTask.control = "stop"
                m.global.sceneManager.callfunc("popScene")
                return true
            end if

            gridComponent.jumpToItem = 0
            return true
        end if

        m.loadItemsTask.control = "stop"
        m.global.sceneManager.callfunc("popScene")
        return true
    end if

    if isStringEqual(key, KeyCode.PLAY)
        itemToPlay = getItemFocused()

        if isValid(itemToPlay)
            m.top.quickPlayNode = itemToPlay
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.LEFT)
        if m.itemGrid.isinFocusChain()
            m.top.alphaActive = true
            m.itemGrid.setFocus(false)
            m.alphaMenu.setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.alphaMenu
            return true
        else if m.genreList.isinFocusChain()
            m.top.alphaActive = true
            m.genreList.setFocus(false)
            m.alphaMenu.setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.alphaMenu
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.RIGHT) and m.alpha.isinFocusChain()
        m.top.alphaActive = false
        m.alphaMenu.setFocus(false)

        if m.loadedItems = 0
            m.sortButton.focus = true
            m.sortButton.setfocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.sortButton
        else

            m.itemGrid.setFocus(m.itemGrid.opacity = 1)
            m.genreList.setFocus(m.genreList.opacity = 1)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
        end if

        return true
    end if

    return false
end function
