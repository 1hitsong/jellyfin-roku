import "pkg:/source/enums/TaskControl.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.top.notificationInterval = .1
    m.playReported = false
    m.top.observeField("state", "audioStateChanged")

    m.playbackTimer = m.top.findNode("playbackTimer")
    m.playbackTimer.observeField("fire", "ReportPlayback")
end sub

' State Change Event Handler
sub audioStateChanged()
    currentState = LCase(m.top.state)

    reportedPlaybackState = "update"

    m.top.disableScreenSaver = (currentState = "playing")

    if currentState = "playing"
        if not m.playReported
            reportedPlaybackState = "start"
            m.playReported = true
        end if
        m.playbackTimer.control = "start"
    else if m.top.state = "paused"
        m.playbackTimer.control = "stop"
    else if currentState = "stopped" or currentState = "finished"
        m.playbackTimer.control = "stop"
        reportedPlaybackState = "stop"
        m.playReported = false
    end if

    ReportPlayback(reportedPlaybackState)
end sub

' Report playback to server
sub ReportPlayback(state = "update" as string)

    if not isValid(m.top.position) then return

    params = {
        "ItemId": m.global.queueManager.callFunc("getCurrentItem").id,
        "PlaySessionId": m.top.content.id,
        "PositionTicks": int(m.top.position) * 10000000&, 'Ensure a LongInteger is used
        "IsPaused": (LCase(m.top.state) = "paused")
    }

    ' Report playstate via global task
    playstateTask = m.global.playstateTask
    playstateTask.setFields({ status: state, params: params })
    playstateTask.control = TaskControl.RUN
end sub
