import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/TaskControl.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.isFirstRun = true
    m.top.overhangTitle = ""
    m.top.optionsAvailable = false
    m.postTask = createObject("roSGNode", "PostTask")

    m.homeRows = m.top.findNode("homeRows")
    animationInterpolator = m.top.findNode("fadeInFocusBitmapInterpolator")
    animationInterpolator.keyValue = `[${ColorPalette.TRANSPARENT}, ${ColorPalette.HIGHLIGHT}]`

    m.fadeInFocusBitmap = m.top.findNode("fadeInFocusBitmap")

    if m.global.session.user.settings["ui.home.splashBackground"] = true
        m.backdrop = m.top.findNode("backdrop")
        m.backdrop.uri = buildURL("/Branding/Splashscreen?format=jpg&foregroundLayer=0.15&fillWidth=1280&width=1280&fillHeight=720&height=720&tag=splash")
    end if
end sub

sub refresh()
    m.homeRows.focusBitmapBlendColor = ColorPalette.HIGHLIGHT
    m.homeRows.callFunc("updateHomeRows")
end sub

sub loadLibraries()
    m.homeRows.focusBitmapBlendColor = ColorPalette.TRANSPARENT
    m.homeRows.callFunc("loadLibraries")
    m.fadeInFocusBitmap.control = "start"
end sub

' JFScreen hook called when the screen is displayed by the screen manager
sub OnScreenShown()
    scene = m.top.getScene()
    overhang = scene.findNode("overhang")
    if isValid(overhang)
        overhang.visible = true
        overhang.title = ""
        overhang.currentUserProfileImage = UserImageURL(m.global.session.user.id)
        overhang.currentUser = m.global.session.user.name
    end if

    if isValid(m.top.lastFocus)
        if LCase(m.top.lastFocus.id) = "overhang"
            overhang.callFunc("highlightUser")
        end if
        m.top.lastFocus.setFocus(true)
    else
        m.top.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.top
    end if

    if not m.isFirstRun
        refresh()
    end if

    ' post the device profile the first time this screen is loaded
    if m.isFirstRun
        m.isFirstRun = false
        m.postTask.arrayData = getDeviceCapabilities()
        m.postTask.apiUrl = "/Sessions/Capabilities/Full"
        m.postTask.control = "RUN"
        m.postTask.observeField("responseCode", "postFinished")
    end if
end sub

' JFScreen hook called when the screen is hidden by the screen manager
sub OnScreenHidden()
    scene = m.top.getScene()
    overhang = scene.findNode("overhang")
    if isValid(overhang)
        overhang.callFunc("dehighlightUser")
        overhang.currentUser = ""
        overhang.title = ""
    end if
end sub

' Triggered by m.postTask after completing a post.
' Empty the task data when finished.
sub postFinished()
    m.postTask.unobserveField("responseCode")
    m.postTask.callFunc("empty")
end sub

sub onPlaylistsLoaded(msg)
    node = msg.getRoSGNode()
    if not isValid(node) then return

    m.top.playlistData = msg.getData()

    popupData = []

    if isValidAndNotEmpty(m.top.playlistData)
        popupData.push(tr("Existing Playlist"))
    end if

    popupData.push(tr("New Playlist"))

    stopLoadingSpinner()
    m.global.sceneManager.callFunc("optionDialog", "libraryitem", tr("Add To Playlist"), [], popupData, node.itemId)
end sub

' Special handling for key presses on the home screen.
function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    ' If the user hit back and is not on the first item of the row,
    ' assume they want to go to the first item of the row.
    ' Otherwise, they are exiting the app.
    if isStringEqual(key, KeyCode.Back) and m.homeRows.currFocusColumn > 0
        m.homeRows.jumpToRowItem = [m.homeRows.currFocusRow, 0]
        return true
    end if

    if isStringEqual(key, KeyCode.OPTIONS)
        if m.homeRows.hasFocus()
            focusedItem = m.homeRows.content.getChild(m.homeRows.rowItemFocused[0]).getChild(m.homeRows.rowItemFocused[1])
            if not isValidAndNotEmpty(focusedItem) then return false

            if inArray([ItemType.COLLECTIONFOLDER, ItemType.CHANNEL, ItemType.FOLDER, ItemType.PLAYLIST, ItemType.PROGRAM, ItemType.TVCHANNEL, ItemType.USERVIEW], focusedItem.type) then return false

            LoadPlaylistsTask = createObject("roSGNode", "LoadItemsTask")
            LoadPlaylistsTask.itemId = focusedItem.LookupCI("id")
            LoadPlaylistsTask.itemsToLoad = "playlists"
            LoadPlaylistsTask.observeFieldScoped("content", "onPlaylistsLoaded")
            LoadPlaylistsTask.control = TaskControl.RUN

            return true
        end if
    end if

    return false
end function
