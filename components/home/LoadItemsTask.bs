import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/api/Items.bs"
import "pkg:/source/api/sdk.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.top.functionName = "loadItems"
end sub

function loadLibraries() as object
    results = []

    data = api.GetUserViews({ "userId": m.global.session.user.id })

    if not isChainValid(data, "items") then return results

    for each item in data.LookupCI("items")
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.json = {
            id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadLatestMedia() as object
    results = []

    params = {
        userId: m.global.session.user.id,
        limit: 16,
        parentId: m.top.itemId,
        enableImageTypes: `${ImageType.PRIMARY}, ${ImageType.BACKDROP}, ${ImageType.THUMB}`,
        imageTypeLimit: 1,
        enableTotalRecordCount: false
    }

    data = api.items.GetLatest(params)

    if not isValidAndNotEmpty(data) then return results

    for each item in data
        if not isStringEqual(item.Type, ItemType.BOOK)
            tmp = CreateObject("roSGNode", "HomeData")
            tmp.json = {
                id: item.LookupCI("Id"),
                name: item.LookupCI("name"),
                Type: item.LookupCI("Type"),
                CollectionType: item.LookupCI("CollectionType"),
                ChannelName: item.LookupCI("ChannelName"),
                ChannelId: item.LookupCI("ChannelId"),
                EpisodeTitle: item.LookupCI("EpisodeTitle"),
                ChildCount: item.LookupCI("ChildCount"),
                EndDate: item.LookupCI("EndDate"),
                OfficialRating: item.LookupCI("OfficialRating"),
                ProductionYear: item.LookupCI("ProductionYear"),
                Album: item.LookupCI("Album"),
                SeriesName: item.LookupCI("SeriesName"),
                ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
                IndexNumber: item.LookupCI("IndexNumber"),
                AlbumArtist: item.LookupCI("AlbumArtist"),
                Status: item.LookupCI("Status"),
                ImageTags: item.LookupCI("ImageTags"),
                UserData: item.LookupCI("UserData"),
                ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
                ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
                ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
                SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
                BackdropImageTags: item.LookupCI("BackdropImageTags")
            }
            results.push(tmp)
        end if
    end for

    return results
end function

function loadContinueWatching() as object
    results = []

    params = {
        recursive: true,
        SortBy: "DatePlayed",
        SortOrder: "Descending",
        Filters: "IsResumable",
        MediaTypes: ItemType.VIDEO,
        excludeItemTypes: ItemType.BOOK,
        EnableTotalRecordCount: false
    }
    data = api.useritems.GetResumeItems(params)

    if not isChainValid(data, "Items") then return results

    for each item in data.Items
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.Id = item.LookupCI("Id")
        tmp.name = item.LookupCI("name")
        tmp.type = item.LookupCI("Type")
        tmp.json = {
            Id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            SeriesName: item.LookupCI("SeriesName"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Status: item.LookupCI("Status"),
            EndDate: item.LookupCI("EndDate"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumber: item.LookupCI("IndexNumber"),
            OfficialRating: item.LookupCI("OfficialRating"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbItemId: item.LookupCI("ParentThumbItemId"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

function loadNextUp() as object
    results = []

    params = {
        recursive: true,
        SortBy: "DatePlayed",
        SortOrder: "Descending",
        ImageTypeLimit: 1,
        UserId: m.global.session.user.id,
        EnableRewatching: m.global.session.user.settings["ui.details.enablerewatchingnextup"],
        DisableFirstEpisode: false,
        limit: 24,
        EnableTotalRecordCount: false
    }

    maxDaysInNextUp = m.global.session.user.settings["ui.details.maxdaysnextup"].ToInt()
    if isValid(maxDaysInNextUp)
        if maxDaysInNextUp > 0
            dateToday = CreateObject("roDateTime")
            dateCutoff = CreateObject("roDateTime")

            dateCutoff.FromSeconds(dateToday.AsSeconds() - (maxDaysInNextUp * 86400))

            params.AddReplace("NextUpDateCutoff", dateCutoff.ToISOString())
        end if
    end if

    addViewAll = true ' Assume there will be a "View All" to start
    checkViewAll = false ' Only need to check if we don't have anything in the Next Up home row

    data = api.shows.GetNextUp(params)

    if isChainValid(data, "Items")
        for each item in data.Items
            tmp = CreateObject("roSGNode", "HomeData")
            tmp.json = item
            results.push(tmp)
        end for
        if data.Items.Count() = 0
            checkViewAll = true
        end if
    else
        checkViewAll = true
    end if

    ' Add "View All"
    if checkViewAll
        ' Nothing to show in Next Up, but are there hidden items (e.g. > 365 days old)?
        params.Delete("NextUpDateCutoff")
        params.AddReplace("limit", 1) ' if there is even one, then we know we need to show "View All"
        data = api.shows.GetNextUp(params)
        if not isValid(data) or (isValid(data) and isValid(data.Items) and data.Items.Count() = 0)
            addViewAll = false
        end if
    end if

    if addViewAll
        tmp = CreateObject("roSGNode", "HomeData")
        tmp.type = ItemType.COLLECTIONFOLDER
        tmp.usePoster = false
        tmp.json = {
            IsFolder: true,
            Name: tr("View All Next Up"),
            Type: ItemType.COLLECTIONFOLDER,
            CollectionType: "nextup"
        }
        results.push(tmp)
    end if

    return results
end function

function loadFavorites() as object
    results = []

    params = {
        userid: m.global.session.user.id,
        Filters: "IsFavorite",
        Limit: 20,
        recursive: true,
        sortby: "random",
        EnableTotalRecordCount: false
    }

    data = api.items.Get(params)

    if not isChainValid(data, "Items") then return results

    for each item in data.Items
        if inArray([ItemType.BOOK, ItemType.AUDIO], item.type) then continue for

        tmp = CreateObject("roSGNode", "HomeData")

        params = {
            Tags: item.PrimaryImageTag,
            MaxWidth: 234,
            MaxHeight: 330
        }
        tmp.posterURL = ImageUrl(item.Id, "Primary", params)
        tmp.json = {
            Id: item.LookupCI("Id"),
            name: item.LookupCI("name"),
            Type: item.LookupCI("Type"),
            SeriesName: item.LookupCI("SeriesName"),
            ProductionYear: item.LookupCI("ProductionYear"),
            Status: item.LookupCI("Status"),
            EndDate: item.LookupCI("EndDate"),
            ParentIndexNumber: item.LookupCI("ParentIndexNumber"),
            IndexNumber: item.LookupCI("IndexNumber"),
            OfficialRating: item.LookupCI("OfficialRating"),
            CollectionType: item.LookupCI("CollectionType"),
            ImageTags: item.LookupCI("ImageTags"),
            UserData: item.LookupCI("UserData"),
            ParentThumbItemId: item.LookupCI("ParentThumbItemId"),
            ParentThumbImageTag: item.LookupCI("ParentThumbImageTag"),
            ParentBackdropImageTags: item.LookupCI("ParentBackdropImageTags"),
            ParentBackdropItemId: item.LookupCI("ParentBackdropItemId"),
            SeriesPrimaryImageTag: item.LookupCI("SeriesPrimaryImageTag"),
            BackdropImageTags: item.LookupCI("BackdropImageTags")
        }
        results.push(tmp)
    end for

    return results
end function

sub loadItems()
    if not isValidAndNotEmpty(m.global.session.user.id)
        m.top.content = []
        return
    end if

    results = []

    ' Load Libraries
    if isStringEqual(m.top.itemsToLoad, "libraries")
        m.top.content = loadLibraries()
        return
    end if

    ' Load Latest Additions to Libraries
    if isStringEqual(m.top.itemsToLoad, "latest")
        m.top.content = loadLatestMedia()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "continue")
        m.top.content = loadContinueWatching()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "nextUp")
        m.top.content = loadNextUp()
        return
    end if

    if isStringEqual(m.top.itemsToLoad, "favorites")
        m.top.content = loadFavorites()
        return
    end if

    if m.top.itemsToLoad = "continueListening"
        activeUser = m.global.session.user.id
        if isValid(activeUser)
            url = Substitute("Users/{0}/Items/Resume", activeUser)

            params = {}
            params["recursive"] = true
            params["SortBy"] = "DatePlayed"
            params["SortOrder"] = "Descending"
            params["Filters"] = "IsResumable"
            params["MediaTypes"] = "Audio"
            params["EnableTotalRecordCount"] = false

            resp = APIRequest(url, params)
            data = getJson(resp)
            if isValid(data) and isValid(data.Items)
                for each item in data.Items
                    tmp = CreateObject("roSGNode", "HomeData")
                    tmp.json = item
                    results.push(tmp)
                end for
            end if
        end if
    else if m.top.itemsToLoad = "onNow"
        url = "LiveTv/Programs/Recommended"
        params = {}
        params["userId"] = m.global.session.user.id
        params["isAiring"] = true
        params["limit"] = 16 ' 16 to be consistent with "Latest In"
        params["imageTypeLimit"] = 1
        params["enableImageTypes"] = "Primary,Thumb,Backdrop"
        params["enableTotalRecordCount"] = false
        params["fields"] = "ChannelInfo,PrimaryImageAspectRatio"

        resp = APIRequest(url, params)
        data = getJson(resp)
        if isValid(data) and isValid(data.Items)
            for each item in data.Items
                tmp = CreateObject("roSGNode", "HomeData")
                item.ImageURL = ImageURL(item.Id)
                tmp.json = item
                results.push(tmp)
            end for
        end if

        ' Extract array of persons from Views and download full metadata for each
    else if m.top.itemsToLoad = "people"
        for each person in m.top.peopleList
            tmp = CreateObject("roSGNode", "ExtrasData")
            tmp.Id = person.Id
            tmp.labelText = person.Name
            params = {}
            params["Tags"] = person.PrimaryImageTag
            params["MaxWidth"] = 234
            params["MaxHeight"] = 330
            tmp.posterURL = ImageUrl(person.Id, "Primary", params)
            tmp.json = person
            results.push(tmp)
        end for
    else if m.top.itemsToLoad = "specialfeatures"
        params = {}
        url = Substitute("Users/{0}/Items/{1}/SpecialFeatures", m.global.session.user.id, m.top.itemId)
        resp = APIRequest(url, params)
        data = getJson(resp)
        if data <> invalid and data.count() > 0
            for each specfeat in data
                tmp = CreateObject("roSGNode", "ExtrasData")
                results.push(tmp)
                params = {}
                params["Tags"] = specfeat.ImageTags.Primary
                params["MaxWidth"] = 450
                params["MaxHeight"] = 402
                tmp.posterURL = ImageUrl(specfeat.Id, "Primary", params)
                tmp.json = specfeat
            end for
        end if
    else if m.top.itemsToLoad = "likethis"
        params = { "userId": m.global.session.user.id, "limit": 16 }
        data = api.items.GetSimilar(m.top.itemId, params)
        if isChainValid(data, "Items")
            for each item in data.items
                tmp = CreateObject("roSGNode", "ExtrasData")
                tmp.posterURL = ImageUrl(item.Id, "Primary", { "Tags": item.PrimaryImageTag })
                tmp.json = {
                    Id: item.ID,
                    Name: item.Name,
                    PremiereDate: item.PremiereDate,
                    ProductionYear: item.ProductionYear,
                    Type: item.Type
                }
                results.push(tmp)
            end for
        end if
    else if m.top.itemsToLoad = "personMovies"
        getPersonVideos("Movie", results, {})
    else if m.top.itemsToLoad = "personTVShows"
        getPersonVideos("Episode", results, { MaxWidth: 502, MaxHeight: 300 })
    else if m.top.itemsToLoad = "personSeries"
        getPersonVideos("Series", results, {})
    else if m.top.itemsToLoad = "metaData"
        results.push(ItemMetaData(m.top.itemId))
    else if m.top.itemsToLoad = "audioStream"
        results.push(AudioStream(m.top.itemId))
    else if m.top.itemsToLoad = "backdropImage"
        results.push(BackdropImage(m.top.itemId))
    end if

    m.top.content = results
end sub

sub getPersonVideos(videoType, dest, dimens)
    params = {
        personIds: m.top.itemId,
        recursive: true,
        includeItemTypes: videoType,
        Limit: 50,
        SortBy: "Random"
    }
    data = api.users.GetItemsByQuery(m.global.session.user.id, params)

    if isValidAndNotEmpty(data)
        for each item in data.items
            tmp = CreateObject("roSGNode", "ExtrasData")
            imgParms = { "Tags": item.ImageTags.Primary }
            imgParms.append(dimens)
            tmp.posterURL = ImageUrl(item.Id, "Primary", imgParms)

            tmp.json = {
                Id: item.ID,
                IndexNumber: item.IndexNumber,
                Name: item.Name,
                ParentIndexNumber: item.ParentIndexNumber,
                ProductionYear: item.ProductionYear,
                SeriesName: item.SeriesName,
                Type: item.Type
            }
            dest.push(tmp)
        end for
    end if
end sub
